# -*- coding: utf-8 -*-
import os
from datetime import datetime
from decimal import Decimal

import pandas as pd
# Form implementation generated from reading ui file 'NhuDanhDashboard.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets, Qt, QtChart
import pyodbc
import random
from PyQt5.QtWidgets import QDialog, QMessageBox, QTableWidget, QTableWidgetItem, QAbstractItemView
from matplotlib import pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from openpyxl import Workbook
from add_vai_dialog import AddDataVaiDialog
from change_ct_phieu_xuat_dialog import ChangeDataCTPhieuXuatDialog
from change_nhacungcap import ChangeNCCDialog
from change_phieu_xuat_dialog import ChangeDataPhieuXuatDialog
from change_vai_dialog import ChangeVaiDialog
from delete_nhacungcap import DeleteNCCDialog
from delete_sanpham_dialog import DeleteSPDialog
from delete_vai_dialog import DeleteVaiDialog
from import_excel_sp_dialog import ImportExcelSPDialog
from import_excel_vai_dialog import ImportExcelVaiDialog
from import_excel_ncc_dialog import ImportExcelNCCDialog
from add_nhacungcap import AddDataNCCDialog
from add_vattu_dialog import AddDataVTDialog
from change_vattu_dialog import ChangeVTDialog
from delete_vattu_dialog import DeleteVTDialog
from import_excel_vattu_dialog import ImportExcelVTDialog
from connect_to_server_dialog import ConnectToServerDialog
from add_khachhang_dialog import AddDataKhachHangDialog
from change_khachhang_dialog import ChangeDataKHDialog
from delete_khachhang_dialog import DeleteKHDialog
from import_excel_khachhang_dialog import ImportExcelKHDialog
from add_sanpham_dialog import AddSPDialog
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from change_sanpham_dialog import ChangeDataSPDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setMinimumSize(QtCore.QSize(1200, 700))
        self.conn = self.connect_to_server()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # Use a horizontal layout for the main layout
        self.mainLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.mainLayout.setObjectName("mainLayout")

        self.menuBar = QtWidgets.QWidget(self.centralwidget)
        self.menuBar.setMinimumSize(QtCore.QSize(200, 0))
        self.menuBar.setMaximumSize(QtCore.QSize(200, 16777215))
        self.menuBar.setObjectName("menuBar")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.menuBar)
        self.verticalLayout.setObjectName("verticalLayout")

        self.labelLOGO = QtWidgets.QLabel(self.menuBar)
        self.labelLOGO.setObjectName("labelLOGO")
        self.verticalLayout.addWidget(self.labelLOGO)

        self.buttonDonHang = QtWidgets.QPushButton(self.menuBar)
        self.buttonDonHang.setObjectName("buttonDonHang")
        self.verticalLayout.addWidget(self.buttonDonHang)

        self.buttonKhachHang = QtWidgets.QPushButton(self.menuBar)
        self.buttonKhachHang.setObjectName("buttonKhachHang")
        self.verticalLayout.addWidget(self.buttonKhachHang)

        self.buttonSanPham = QtWidgets.QPushButton(self.menuBar)
        self.buttonSanPham.setObjectName("buttonSanPham")
        self.verticalLayout.addWidget(self.buttonSanPham)

        self.buttonKho = QtWidgets.QPushButton(self.menuBar)
        self.buttonKho.setObjectName("buttonKho")
        self.verticalLayout.addWidget(self.buttonKho)

        self.buttonTrangChu = QtWidgets.QPushButton(self.menuBar)
        self.buttonTrangChu.setObjectName("buttonTrangChu")
        self.verticalLayout.addWidget(self.buttonTrangChu)
        # self.buttonPhanTich = QtWidgets.QPushButton(self.menuBar)
        # self.buttonPhanTich.setObjectName("buttonPhanTich")
        # self.verticalLayout.addWidget(self.buttonPhanTich)

        self.verticalLayout.addStretch()  # Add a stretch to push exit button to the bottom

        self.buttonExit = QtWidgets.QPushButton(self.menuBar)
        self.buttonExit.setObjectName("buttonExit")
        self.verticalLayout.addWidget(self.buttonExit)

        self.mainLayout.addWidget(self.menuBar)

        self.body = QtWidgets.QWidget(self.centralwidget)
        self.body.setObjectName("body")
        self.bodyLayout = QtWidgets.QVBoxLayout(self.body)
        self.bodyLayout.setObjectName("bodyLayout")
        self.header = QtWidgets.QWidget(self.body)
        self.header.setObjectName("header")

        self.headerLayout = QtWidgets.QHBoxLayout(self.header)
        self.headerLayout.setObjectName("headerLayout")

        self.lineEditTimKiem = QtWidgets.QLineEdit(self.header)
        self.lineEditTimKiem.setObjectName("lineEditTimKiem")
        self.headerLayout.addWidget(self.lineEditTimKiem)

        self.buttonTimKiem = QtWidgets.QPushButton(self.header)
        self.buttonTimKiem.setObjectName("buttonTimKiem")
        self.headerLayout.addWidget(self.buttonTimKiem)
        self.resultTable = QtWidgets.QTableWidget(self.buttonTrangChu)
        self.bodyLayout.addWidget(self.resultTable)
        self.buttonTimKiem.clicked.connect(self.searchDatabase)

        # self.buttonAdmin = QtWidgets.QPushButton(self.header)
        # self.buttonAdmin.setObjectName("buttonAdmin")
        # self.headerLayout.addWidget(self.buttonAdmin)

        self.bodyLayout.addWidget(self.header)

        self.stackedWidget = QtWidgets.QStackedWidget(self.body)
        self.stackedWidget.setObjectName("stackedWidget")

        self.Home = QtWidgets.QWidget()
        self.Home.setObjectName("Home")
        self.stackedWidget.addWidget(self.Home)

        self.homeLayout = QtWidgets.QVBoxLayout(self.Home)
        self.homeLayout.setObjectName("homeLayout")

        # Create a horizontal layout for buttons
        self.buttonLayout = QtWidgets.QHBoxLayout()
        self.buttonLayout.setObjectName("buttonLayout")

        # Create "Gửi SMS" button
        self.sendSMSButton = QtWidgets.QPushButton("Gửi SMS", self.Home)
        self.sendSMSButton.setObjectName("sendSMSButton")
        self.buttonLayout.addWidget(self.sendSMSButton)

        # Create "Danh sách SMS" button
        self.listSMSButton = QtWidgets.QPushButton("Danh sách SMS", self.Home)
        self.listSMSButton.setObjectName("listSMSButton")
        self.buttonLayout.addWidget(self.listSMSButton)

        self.capNhatButton = QtWidgets.QPushButton("Cập nhật", self.Home)
        self.capNhatButton.setObjectName("capNhatButton")
        self.capNhatButton.clicked.connect(self.reload_table_data)
        self.buttonLayout.addWidget(self.capNhatButton)

        # Add buttonLayout to homeLayout
        self.homeLayout.addLayout(self.buttonLayout)

        # Add chartWidget to homeLayout
        self.chartWidget = QtWidgets.QWidget(self.Home)
        self.homeLayout.addWidget(self.chartWidget)

        # Create yearComboBox and add it to chartWidget
        self.yearComboBox = QtWidgets.QComboBox(self.chartWidget)
        self.yearComboBox.setGeometry(QtCore.QRect(10, 10, 100, 25))
        self.yearComboBox.currentIndexChanged.connect(self.create_chart)
        self.populate_year_combobox()
        # Tạo giao diện cho widget Home



        #DonHang
        self.DonHang = QtWidgets.QWidget()
        self.DonHang.setObjectName("DonHang")
        self.stackedWidget.addWidget(self.DonHang)
        donHangLayout = QtWidgets.QVBoxLayout(self.DonHang)
        self.list_window_phieu_xuat = None
        self.detail_window_phieu_xuat = None

        # Header
        self.headerDonHangLeft = QtWidgets.QWidget()
        self.headerDonHangLeft.setFixedWidth(400)
        headerLayout = QtWidgets.QFormLayout(self.headerDonHangLeft)
        self.lineEditDHMaHD = QtWidgets.QLineEdit()
        self.lineEditDHMaHD.setDisabled(True)
        self.last_date = None
        self.serial_number = 0
        self.update_invoice_number()
        self.dateEditNgayMay = QtWidgets.QDateEdit(QtCore.QDate.currentDate())
        self.dateEditNgayGiao = QtWidgets.QDateEdit(QtCore.QDate.currentDate().addDays(7))
        self.lineEditTenKH = QtWidgets.QLineEdit()
        self.lineEditSDT = QtWidgets.QLineEdit()
        self.lineEditSDT.returnPressed.connect(self.check_khach_hang)
        self.lineEditDiaChi = QtWidgets.QLineEdit()
        headerLayout.addRow("Mã Hóa Đơn:", self.lineEditDHMaHD)
        headerLayout.addRow("Ngày May:", self.dateEditNgayMay)
        headerLayout.addRow("Ngày Giao:", self.dateEditNgayGiao)
        headerLayout.addRow("Tên Khách Hàng:", self.lineEditTenKH)
        headerLayout.addRow("SĐT :", self.lineEditSDT)
        headerLayout.addRow("Địa Chỉ:", self.lineEditDiaChi)

        donHangLayout.addWidget(self.headerDonHangLeft)

        # Body
        self.bodyDonHang = QtWidgets.QWidget()
        bodyLayout = QtWidgets.QHBoxLayout(self.bodyDonHang)
        self.widgetDHAo = QtWidgets.QWidget(self.bodyDonHang)
        self.widgetDHAo.setGeometry(QtCore.QRect(0, 0, 750, 411))
        self.widgetDHAo.setMinimumSize(700, 411)
        self.widgetDHAo.setObjectName("widgetDHAo")
        self.widget = QtWidgets.QWidget(self.widgetDHAo)
        self.widget.setGeometry(QtCore.QRect(0, 0, 815, 380))
        self.widget.setObjectName("widget")
        self.verticalLayoutDHAo = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayoutDHAo.setContentsMargins(0, 0, 0, 0)
        self.verticalLayoutDHAo.setObjectName("verticalLayoutDHAo")
        self.horizontalLayoutDHAoHeader = QtWidgets.QHBoxLayout()
        self.horizontalLayoutDHAoHeader.setObjectName("horizontalLayoutDHAoHeader")
        self.pushButtonDHAddAo = QtWidgets.QPushButton(self.widget)
        self.pushButtonDHAddAo.setObjectName("pushButtonDHAddAo")
        self.horizontalLayoutDHAoHeader.addWidget(self.pushButtonDHAddAo)
        self.comboBoxDHLoaiAo = QtWidgets.QComboBox(self.widget)
        self.comboBoxDHLoaiAo.setMinimumSize(QtCore.QSize(150, 0))
        self.comboBoxDHLoaiAo.setObjectName("comboBoxDHLoaiAo")
        self.horizontalLayoutDHAoHeader.addWidget(self.comboBoxDHLoaiAo)
        self.lineEditDHLoaiVai = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHLoaiVai.setMinimumSize(QtCore.QSize(100, 0))
        self.lineEditDHLoaiVai.setObjectName("lineEditDHLoaiVai")
        self.horizontalLayoutDHAoHeader.addWidget(self.lineEditDHLoaiVai)
        self.label_DHSL = QtWidgets.QLabel(self.widget)
        self.label_DHSL.setObjectName("label_DHSL")
        self.horizontalLayoutDHAoHeader.addWidget(self.label_DHSL)
        self.lineEdit_DHSLAo = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_DHSLAo.setMaximumSize(QtCore.QSize(50, 16777215))
        self.lineEdit_DHSLAo.setObjectName("lineEdit_DHSLAo")
        self.horizontalLayoutDHAoHeader.addWidget(self.lineEdit_DHSLAo)
        self.label_DHTTien = QtWidgets.QLabel(self.widget)
        self.label_DHTTien.setObjectName("label_DHTTien")
        self.horizontalLayoutDHAoHeader.addWidget(self.label_DHTTien)
        self.lineEdit_DHTTienAo = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_DHTTienAo.setObjectName("lineEdit_DHTTienAo")
        self.horizontalLayoutDHAoHeader.addWidget(self.lineEdit_DHTTienAo)


        # self.frameAnhVest = QtWidgets.QFrame(self.widget)
        # self.frameAnhVest.setMinimumSize(QtCore.QSize(200, 111))
        # self.frameAnhVest.setBaseSize(QtCore.QSize(200, 111))
        # self.frameAnhVest.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frameAnhVest.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.frameAnhVest.setObjectName("frameAnhVest")
        # self.horizontalLayoutDHAoHeader.addWidget(self.frameAnhVest)
        self.verticalLayoutDHAo.addLayout(self.horizontalLayoutDHAoHeader)
        self.gridLayoutDHAo = QtWidgets.QGridLayout()
        self.gridLayoutDHAo.setObjectName("gridLayoutDHAo")
        self.horizontalLayoutDHAoTay = QtWidgets.QHBoxLayout()
        self.horizontalLayoutDHAoTay.setObjectName("horizontalLayoutDHAoTay")
        self.lineEditDHAoDai11 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoDai11.setObjectName("lineEditDHAoDai11")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoDai11, 1, 0, 1, 1)
        self.labelDHAoDai = QtWidgets.QLabel(self.widget)
        self.labelDHAoDai.setObjectName("labelDHAoDai")
        self.gridLayoutDHAo.addWidget(self.labelDHAoDai, 0, 0, 1, 1)
        self.horizontalLayoutDHAoVai = QtWidgets.QHBoxLayout()
        self.horizontalLayoutDHAoVai.setObjectName("horizontalLayoutDHAoVai")
        self.lineEditDHAoVai11 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoVai11.setObjectName("lineEditDHAoVai11")
        self.horizontalLayoutDHAoVai.addWidget(self.lineEditDHAoVai11)
        self.lineEditDHAoVai12 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoVai12.setObjectName("lineEditDHAoVai12")
        self.horizontalLayoutDHAoVai.addWidget(self.lineEditDHAoVai12)
        self.lineEditDHAoVai13 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoVai13.setObjectName("lineEditDHAoVai13")
        self.horizontalLayoutDHAoVai.addWidget(self.lineEditDHAoVai13)
        self.gridLayoutDHAo.addLayout(self.horizontalLayoutDHAoVai, 1, 1, 1, 1)
        self.lineEditDHAoTay11 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoTay11.setObjectName("lineEditDHAoTay11")
        self.horizontalLayoutDHAoTay.addWidget(self.lineEditDHAoTay11)
        self.lineEditDHAoTay12 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoTay12.setObjectName("lineEditDHAoTay12")
        self.horizontalLayoutDHAoTay.addWidget(self.lineEditDHAoTay12)
        self.gridLayoutDHAo.addLayout(self.horizontalLayoutDHAoTay, 1, 2, 1, 1)
        self.horizontalLayoutDHAoNguc = QtWidgets.QHBoxLayout()
        self.horizontalLayoutDHAoNguc.setObjectName("horizontalLayoutDHAoNguc")
        self.lineEditDHAoNguc11 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoNguc11.setObjectName("lineEditDHAoNguc11")
        self.horizontalLayoutDHAoNguc.addWidget(self.lineEditDHAoNguc11)
        self.lineEditDHAoNguc12 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoNguc12.setObjectName("lineEditDHAoNguc12")
        self.horizontalLayoutDHAoNguc.addWidget(self.lineEditDHAoNguc12)
        self.gridLayoutDHAo.addLayout(self.horizontalLayoutDHAoNguc, 1, 3, 1, 1)
        self.lineEditHDAoDai21 = QtWidgets.QLineEdit(self.widget)
        self.lineEditHDAoDai21.setObjectName("lineEditHDAoDai21")
        self.gridLayoutDHAo.addWidget(self.lineEditHDAoDai21, 2, 0, 1, 1)
        self.lineEditDHAoVai21 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoVai21.setObjectName("lineEditDHAoVai21")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoVai21, 2, 1, 1, 1)
        self.lineEditDHAoTay21 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoTay21.setObjectName("lineEditDHAoTay21")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoTay21, 2, 2, 1, 1)
        self.lineEditDHAoNguc21 = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoNguc21.setObjectName("lineEditDHAoNguc21")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoNguc21, 2, 3, 1, 1)
        self.lineEditDHAoEo = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoEo.setObjectName("lineEditDHAoEo")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoEo, 2, 4, 1, 1)
        self.lineEditDHAoMong = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoMong.setObjectName("lineEditDHAoMong")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoMong, 2, 5, 1, 1)
        self.lineEditDHAoCo = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoCo.setObjectName("lineEditDHAoCo")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoCo, 2, 6, 1, 1)
        self.lineEditDHAoLaCo = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoLaCo.setObjectName("lineEditDHAoLaCo")
        self.gridLayoutDHAo.addWidget(self.lineEditDHAoLaCo, 2, 7, 1, 1)

        self.labelDHAoMong = QtWidgets.QLabel(self.widget)
        self.labelDHAoMong.setObjectName("labelDHAoMong")
        self.gridLayoutDHAo.addWidget(self.labelDHAoMong, 0, 5, 1, 1)
        self.labelDHAoCo = QtWidgets.QLabel(self.widget)
        self.labelDHAoCo.setObjectName("labelDHAoCo")
        self.gridLayoutDHAo.addWidget(self.labelDHAoCo, 0, 6, 1, 1)
        self.labelDHAoLaCo = QtWidgets.QLabel(self.widget)
        self.labelDHAoLaCo.setObjectName("labelDHAoLaCo")
        self.gridLayoutDHAo.addWidget(self.labelDHAoLaCo, 0, 7, 1, 1)
        self.labelDHAoTay = QtWidgets.QLabel(self.widget)
        self.labelDHAoTay.setObjectName("labelDHAoTay")
        self.gridLayoutDHAo.addWidget(self.labelDHAoTay, 0, 2, 1, 1)
        self.labelDHAoVai = QtWidgets.QLabel(self.widget)
        self.labelDHAoVai.setObjectName("labelDHAoVai")
        self.gridLayoutDHAo.addWidget(self.labelDHAoVai, 0, 1, 1, 1)
        self.labelDHAoEo = QtWidgets.QLabel(self.widget)
        self.labelDHAoEo.setObjectName("labelDHAoEo")
        self.gridLayoutDHAo.addWidget(self.labelDHAoEo, 0, 4, 1, 1)
        self.labelDHAoNguc = QtWidgets.QLabel(self.widget)
        self.labelDHAoNguc.setObjectName("labelDHAoNguc")
        self.gridLayoutDHAo.addWidget(self.labelDHAoNguc, 0, 3, 1, 1)
        self.comboBoxDHAoChuaCat = QtWidgets.QComboBox(self.widget)
        self.comboBoxDHAoChuaCat.setObjectName("comboBoxDHAoChuaCat")
        self.gridLayoutDHAo.addWidget(self.comboBoxDHAoChuaCat, 1, 5, 1, 3)
        self.verticalLayoutDHAo.addLayout(self.gridLayoutDHAo)
        self.lineEditDHAoGhiChu = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHAoGhiChu.setObjectName("lineEditDHAoGhiChu")
        self.lineEditDHAoGhiChu.setPlaceholderText("Lời dặn...")
        self.tableViewDHAo = QtWidgets.QTableView(self.widget)
        self.tableViewDHAo.setObjectName("tableViewDHAo")
        self.modelDHAo = QStandardItemModel()
        self.modelDHAo.setHorizontalHeaderLabels(['Sản phẩm', 'Loại vải', 'SL', 'Công may', 'Tiền vải', 'Thành tiền', 'Dài trên', 'Dài dưới', 'Vai', 'Xuôi vai', 'Chỏm vai', 'Hạ vai', 'Tay', 'Bắp', 'Khuỷu', 'Ngực', 'Hạ Ngực', 'ĐG ngực', 'Eo', 'Mông áo', 'Cổ', 'Lá cổ', 'Trạng thái', 'Ghi chú'])

        self.pushButtonDHAddAo.clicked.connect(self.add_data_to_table_ao)
        self.tableViewDHAo.setModel(self.modelDHAo)
        self.hide_columns_Ao()
        self.verticalLayoutDHAo.addWidget(self.lineEditDHAoGhiChu)
        self.verticalLayoutDHAo.addWidget(self.tableViewDHAo)
        self.pushButtonDHDeleteAo = QtWidgets.QPushButton("Xóa hàng áo", self.widget)
        self.horizontalLayoutDHAoHeader.addWidget(self.pushButtonDHDeleteAo)
        self.pushButtonDHDeleteAo.clicked.connect(self.delete_selected_row_ao)
        self.widgetDHQuan = QtWidgets.QWidget(self.bodyDonHang)
        self.widgetDHQuan.setGeometry(QtCore.QRect(800, 0, 750, 411))
        self.widgetDHQuan.setObjectName("widgetDHQuan")
        self.widget1 = QtWidgets.QWidget(self.widgetDHQuan)
        self.widget1.setGeometry(QtCore.QRect(0, 1, 815, 380))
        self.widget1.setObjectName("widget1")
        self.verticalLayoutDHQuan = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayoutDHQuan.setContentsMargins(0, 0, 0, 0)
        self.verticalLayoutDHQuan.setObjectName("verticalLayoutDHQuan")
        self.horizontalLayoutDHQuanHeader = QtWidgets.QHBoxLayout()
        self.horizontalLayoutDHQuanHeader.setObjectName("horizontalLayoutDHQuanHeader")
        self.pushButtonDHAddQuan = QtWidgets.QPushButton(self.widget1)
        self.pushButtonDHAddQuan.setObjectName("pushButtonDHAddQuan")
        self.horizontalLayoutDHQuanHeader.addWidget(self.pushButtonDHAddQuan)
        self.comboBoxDHLoaiQuan = QtWidgets.QComboBox(self.widget1)
        self.comboBoxDHLoaiQuan.setMinimumSize(QtCore.QSize(150, 0))
        self.comboBoxDHLoaiQuan.setObjectName("comboBoxDHLoaiQuan")
        self.horizontalLayoutDHQuanHeader.addWidget(self.comboBoxDHLoaiQuan)

        self.lineEditDHLoaiVaiQ = QtWidgets.QLineEdit(self.widget)
        self.lineEditDHLoaiVaiQ.setMinimumSize(QtCore.QSize(100, 0))
        self.lineEditDHLoaiVaiQ.setObjectName("lineEditDHLoaiVaiQ")
        self.horizontalLayoutDHQuanHeader.addWidget(self.lineEditDHLoaiVaiQ)

        self.label_DHSL_2 = QtWidgets.QLabel(self.widget1)
        self.label_DHSL_2.setObjectName("label_DHSL_2")
        self.horizontalLayoutDHQuanHeader.addWidget(self.label_DHSL_2)
        self.lineEdit_DHSLQuan = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_DHSLQuan.setMaximumSize(QtCore.QSize(50, 16777215))
        self.lineEdit_DHSLQuan.setObjectName("lineEdit_DHSLQuan")
        self.horizontalLayoutDHQuanHeader.addWidget(self.lineEdit_DHSLQuan)
        self.label_DHTTien_2 = QtWidgets.QLabel(self.widget1)
        self.label_DHTTien_2.setObjectName("label_DHTTien_2")
        self.horizontalLayoutDHQuanHeader.addWidget(self.label_DHTTien_2)
        self.lineEdit_DHTTienQuan = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_DHTTienQuan.setObjectName("lineEdit_DHTTienQuan")
        self.horizontalLayoutDHQuanHeader.addWidget(self.lineEdit_DHTTienQuan)

        # self.frameQuanVest = QtWidgets.QFrame(self.widget1)
        # self.frameQuanVest.setMinimumSize(QtCore.QSize(200, 111))
        # self.frameQuanVest.setBaseSize(QtCore.QSize(200, 111))
        # self.frameQuanVest.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frameQuanVest.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.frameQuanVest.setObjectName("frameQuanVest")
        # self.horizontalLayoutDHQuanHeader.addWidget(self.frameQuanVest)
        self.verticalLayoutDHQuan.addLayout(self.horizontalLayoutDHQuanHeader)
        self.gridLayoutDHQuan = QtWidgets.QGridLayout()
        self.gridLayoutDHQuan.setObjectName("gridLayoutDHQuan")
        self.comboBoxDHQuanChuaCat = QtWidgets.QComboBox(self.widget1)
        self.comboBoxDHQuanChuaCat.setObjectName("comboBoxDHQuanChuaCat")
        self.gridLayoutDHQuan.addWidget(self.comboBoxDHQuanChuaCat, 1, 7, 1, 3)
        self.labelDHQuanOng = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanOng.setObjectName("labelDHQuanOng")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanOng, 0, 6, 1, 1)
        self.llabelDHQuanL = QtWidgets.QLabel(self.widget1)
        self.llabelDHQuanL.setObjectName("llabelDHQuanL")
        self.gridLayoutDHQuan.addWidget(self.llabelDHQuanL, 0, 8, 1, 1)
        self.lineEditHDQuanDai = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanDai.setObjectName("lineEditHDQuanDai")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanDai, 2, 0, 1, 1)
        self.lineEditHDQuanLung = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanLung.setObjectName("lineEditHDQuanLung")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanLung, 2, 1, 1, 1)
        self.lineEditHDQuanMong = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanMong.setObjectName("lineEditHDQuanMong")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanMong, 2, 2, 1, 1)
        self.lineEditHDQuanVe = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanVe.setObjectName("lineEditHDQuanVe")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanVe, 2, 3, 1, 1)
        self.lineEditHDQuanGoi = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanGoi.setObjectName("lineEditHDQuanGoi")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanGoi, 2, 4, 1, 1)
        self.lineEditHDQuanTC = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanTC.setObjectName("lineEditHDQuanTC")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanTC, 2, 5, 1, 1)
        self.lineEditHDQuanOng = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanOng.setObjectName("lineEditHDQuanOng")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanOng, 2, 6, 1, 1)
        self.lineEditHDQuanVDay = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanVDay.setObjectName("lineEditHDQuanVDay")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanVDay, 2, 7, 1, 1)
        self.lineEditHDQuanL = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanL.setObjectName("lineEditHDQuanL")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanL, 2, 8, 1, 1)
        self.lineEditHDQuanX = QtWidgets.QLineEdit(self.widget1)
        self.lineEditHDQuanX.setObjectName("lineEditHDQuanX")
        self.gridLayoutDHQuan.addWidget(self.lineEditHDQuanX, 2, 9, 1, 1)
        self.labelDHQuanX = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanX.setObjectName("labelDHQuanX")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanX, 0, 9, 1, 1)
        self.labelDHQuanDai = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanDai.setObjectName("labelDHQuanDai")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanDai, 0, 0, 1, 1)
        self.labelDHQuanLung = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanLung.setObjectName("labelDHQuanLung")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanLung, 0, 1, 1, 1)
        self.labelDHQuanMong = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanMong.setObjectName("labelDHQuanMong")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanMong, 0, 2, 1, 1)
        self.labelDHQuanVe = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanVe.setObjectName("labelDHQuanVe")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanVe, 0, 3, 1, 1)
        self.labelDHQuanGoi = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanGoi.setObjectName("labelDHQuanGoi")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanGoi, 0, 4, 1, 1)
        self.labelDHQuanTC = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanTC.setObjectName("labelDHQuanTC")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanTC, 0, 5, 1, 1)
        self.labelDHQuanVDay = QtWidgets.QLabel(self.widget1)
        self.labelDHQuanVDay.setObjectName("labelDHQuanVDay")
        self.gridLayoutDHQuan.addWidget(self.labelDHQuanVDay, 0, 7, 1, 1)
        self.verticalLayoutDHQuan.addLayout(self.gridLayoutDHQuan)
        self.lineEditDHQuanGhiChu = QtWidgets.QLineEdit(self.widget1)
        self.lineEditDHQuanGhiChu.setObjectName("lineEditDHQuanGhiChu")
        self.lineEditDHQuanGhiChu.setPlaceholderText("Lời dặn...")
        self.tableViewDHQuan = QtWidgets.QTableView(self.widget1)
        self.tableViewDHQuan.setObjectName("tableViewDHQuan")
        self.pushButtonDHDeleteQuan = QtWidgets.QPushButton("Xóa hàng Quần", self.widget)
        self.horizontalLayoutDHQuanHeader.addWidget(self.pushButtonDHDeleteQuan)
        self.pushButtonDHDeleteQuan.clicked.connect(self.delete_selected_row_quan)
        self.modelDHQuan = QStandardItemModel()
        self.modelDHQuan.setHorizontalHeaderLabels(['Sản phẩm', 'Loại vải', 'SL', 'Công may', 'Giá vải', 'Thành tiền', 'Dài', 'Lưng', 'Mông', 'Vê', 'Gối', 'TC', 'Ống', 'VĐáy', 'Lên', 'Xuống', 'Trạng thái', 'Ghi chú'])
        self.pushButtonDHAddQuan.clicked.connect(self.add_data_to_table_quan)
        self.tableViewDHQuan.setModel(self.modelDHQuan)
        self.hide_columns_Quan()
        self.verticalLayoutDHQuan.addWidget(self.lineEditDHQuanGhiChu)
        self.verticalLayoutDHQuan.addWidget(self.tableViewDHQuan)
        bodyLayout.addWidget(self.widgetDHAo)
        bodyLayout.addWidget(self.widgetDHQuan)
        donHangLayout.addWidget(self.bodyDonHang)
        self.populate_combobox_sp_ao()
        self.populate_combobox_sp_quan()
        self.populate_combobox_trang_thai()
        self.populate_combobox_sp_vai()
        # Footer
        self.FooterDonHang = QtWidgets.QWidget()
        checkOutLayoutHD = QtWidgets.QVBoxLayout(self.FooterDonHang)
        inputLayout = QtWidgets.QHBoxLayout()

        self.labelTienDatTruoc = QtWidgets.QLabel("Tiền đặt trước:")
        self.inputTienDatTruoc = QtWidgets.QLineEdit()
        self.inputTienDatTruoc.setPlaceholderText("Nhập số tiền đặt trước")
        self.labelTongTienChu = QtWidgets.QLabel("Tổng tiền:")
        self.labelTongTienSo = QtWidgets.QLabel("0")

        subLayout = QtWidgets.QHBoxLayout()

        # Thêm stretch để đẩy các widget sang phải
        subLayout.addStretch()

        # Tạo label và input với kích thước nhỏ hơn
        self.labelTienDatTruoc = QtWidgets.QLabel("Tiền đặt trước:")
        self.inputTienDatTruoc = QtWidgets.QLineEdit()
        self.labelTongTienChu = QtWidgets.QLabel("Tổng tiền:")
        self.labelTongTienSo = QtWidgets.QLabel("0")
        self.labelTongTienLoai = QtWidgets.QLabel("VND")

        # Đặt kích thước cho các widget
        self.labelTienDatTruoc.setFixedSize(120, 40)  # Kích thước nhỏ hơn
        self.inputTienDatTruoc.setFixedSize(120, 40)  # Kích thước nhỏ hơn
        self.labelTongTienChu.setFixedSize(80, 40)  # Kích thước nhỏ hơn
        self.labelTongTienSo.setFixedSize(80, 40)  # Kích thước nhỏ hơn
        self.labelTongTienLoai.setFixedSize(50, 20)  # Kích thước nhỏ hơn
        # Thêm các widget vào subLayout
        subLayout.addWidget(self.labelTienDatTruoc)
        subLayout.addWidget(self.inputTienDatTruoc)
        subLayout.addWidget(self.labelTongTienChu)
        subLayout.addWidget(self.labelTongTienSo)
        subLayout.addWidget(self.labelTongTienLoai)

        # Thêm subLayout vào inputLayout
        inputLayout.addLayout(subLayout)

        self.labelNgay = QtWidgets.QLabel("Ngày:")
        self.dateEditNgay = QtWidgets.QDateEdit(QtCore.QDate.currentDate())
        self.dateEditNgay.setCalendarPopup(True)  # Hiển thị lịch popup
        inputLayout.addWidget(self.labelNgay)
        inputLayout.addWidget(self.dateEditNgay)
        inputLayout.addWidget(self.labelTongTienChu)
        inputLayout.addWidget(self.labelTongTienSo)
        checkOutLayoutHD.addLayout(inputLayout)

        buttonLayoutHD = QtWidgets.QHBoxLayout(self.FooterDonHang)
        self.pushButtonDHLuuHD = QtWidgets.QPushButton("Lưu Phiếu xuất")
        self.pushButtonDHLuuHD.setObjectName("pushButtonDHLuu")
        self.pushButtonDHSuaHD = QtWidgets.QPushButton("Sửa Phiếu xuất")
        self.pushButtonDHSuaHD.setObjectName("pushButtonDHSua")
        self.pushButtonDHSuaCTHD = QtWidgets.QPushButton("Sửa Chi tiết Phiếu xuất")
        self.pushButtonDHSuaCTHD.setObjectName("pushButtonDHSuaCT")
        self.pushButtonDHDSHD = QtWidgets.QPushButton("Danh sách phiếu xuất")
        self.pushButtonDHDSHD.setObjectName("pushButtonDHDSHD")
        self.pushButtonDHDSchitietHD = QtWidgets.QPushButton("DS chi tiết phiếu xuất")
        self.pushButtonDHDSchitietHD.setObjectName("pushButtonDHDSchitietHD")
        self.pushButtonXuatPhieuXuat = QtWidgets.QPushButton("Xuất file excel phiếu xuất")
        self.pushButtonXuatPhieuXuat.setObjectName("pushButtonXuatPhieuXuat")
        self.pushButtonXuatCTPhieuXuat = QtWidgets.QPushButton("Xuất file excel chi tiết phiếu xuất")
        self.pushButtonXuatCTPhieuXuat.setObjectName("pushButtonXuatCTPhieuXuat")
        self.pushButtonDHLuuHD.clicked.connect(self.save_data_don_hang)
        self.pushButtonDHDSHD.clicked.connect(self.show_phieu_xuat_list)
        self.pushButtonDHDSchitietHD.clicked.connect(self.show_chi_tiet_phieu_xuat_list)
        self.pushButtonDHSuaHD.clicked.connect(self.open_change_phieu_xuat)
        self.pushButtonDHSuaCTHD.clicked.connect(self.open_change_ct_phieu_xuat)
        self.pushButtonXuatPhieuXuat.clicked.connect(self.export_to_excel_phieuxuat)
        self.pushButtonXuatCTPhieuXuat.clicked.connect(self.export_to_excel_ct_phieuxuat)

        buttonLayoutHD.addWidget(self.pushButtonDHLuuHD)
        buttonLayoutHD.addWidget(self.pushButtonDHSuaHD)
        buttonLayoutHD.addWidget(self.pushButtonDHSuaCTHD)
        buttonLayoutHD.addWidget(self.pushButtonDHDSHD)
        buttonLayoutHD.addWidget(self.pushButtonDHDSchitietHD)
        buttonLayoutHD.addWidget(self.pushButtonXuatPhieuXuat)
        buttonLayoutHD.addWidget(self.pushButtonXuatCTPhieuXuat)
        buttonLayoutHD.addLayout(inputLayout)
        checkOutLayoutHD.addLayout(buttonLayoutHD)
        donHangLayout.addWidget(self.FooterDonHang)
        #end don hang

        # Khachhang
        self.KhachHang = QtWidgets.QWidget()
        self.KhachHang.setObjectName("KhachHang")
        self.stackedWidget.addWidget(self.KhachHang)
        khachHangLayout = QtWidgets.QVBoxLayout(self.KhachHang)
        buttonLayout = QtWidgets.QHBoxLayout()
        self.buttonThemKhachHang = QtWidgets.QPushButton("Thêm khách hàng", self.KhachHang)
        self.buttonSuaKhachHang = QtWidgets.QPushButton("Sửa thông tin", self.KhachHang)
        self.buttonXoaKhachHang = QtWidgets.QPushButton("Xóa khách hàng", self.KhachHang)
        self.buttonNhapKhachHang = QtWidgets.QPushButton("Nhập file excel", self.KhachHang)
        self.buttonXuatKhachHang = QtWidgets.QPushButton("Xuất file excel", self.KhachHang)
        self.buttonThemKhachHang.clicked.connect(self.open_add_kh_dialog)
        self.buttonSuaKhachHang.clicked.connect(self.open_change_kh_dialog)
        self.buttonXoaKhachHang.clicked.connect(self.open_delete_kh_dialog)
        self.buttonNhapKhachHang.clicked.connect(self.open_import_excel_kh_dialog)
        self.buttonXuatKhachHang.clicked.connect(self.export_to_excel_kh)

        buttonLayout.addWidget(self.buttonThemKhachHang)
        buttonLayout.addWidget(self.buttonSuaKhachHang)
        buttonLayout.addWidget(self.buttonXoaKhachHang)
        buttonLayout.addWidget(self.buttonNhapKhachHang)
        buttonLayout.addWidget(self.buttonXuatKhachHang)

        khachHangLayout.addLayout(buttonLayout)

        self.khachHangTable = QtWidgets.QTableWidget(self.KhachHang)
        self.khachHangTable.setObjectName("khachHangTable")
        self.khachHangTable.setColumnCount(11)  # 5 columns: Mã khách hàng, Tên khách hàng, SĐT, Địa chỉ, Số đơn đã mua
        self.khachHangTable.setRowCount(0)  # Start with 0 rows, can be dynamically updated
        # Set table headers
        self.khachHangTable.setHorizontalHeaderLabels(
            ['ID', 'Mã khách hàng', 'Tên khách hàng', 'Ngày sinh', 'SĐT', 'Địa chỉ', 'Email', 'Số đơn đã mua',
             'Ghi chú', 'Ngày tạo', 'Ngày cập nhật'])
        self.khachHangTable.setColumnWidth(0, 50)
        self.khachHangTable.setColumnWidth(1, 150)  # Mã khách hàng
        self.khachHangTable.setColumnWidth(2, 150)  # Tên khách hàng
        self.khachHangTable.setColumnWidth(3, 120)  # Ngày sinh
        self.khachHangTable.setColumnWidth(4, 150)  # SĐT
        self.khachHangTable.setColumnWidth(5, 200)  # Địa chỉ
        self.khachHangTable.setColumnWidth(6, 200)  # Email
        self.khachHangTable.setColumnWidth(7, 200)  # Tổng mã hóa đơn
        self.khachHangTable.setColumnWidth(8, 200)  # Ghi chú
        self.khachHangTable.setColumnWidth(9, 200)  # Tổng mã hóa đơn
        self.khachHangTable.setColumnWidth(10, 200)  # Ghi chú
        self.khachHangTable.setSortingEnabled(True)
        self.khachHangTable.horizontalHeader().setStretchLastSection(True)
        # Add the table to the main layout
        khachHangLayout.addWidget(self.khachHangTable)

        # SanPham
        self.SanPham = QtWidgets.QWidget()
        self.SanPham.setObjectName("SanPham")
        self.stackedWidget.addWidget(self.SanPham)
        sanPhamLayout = QtWidgets.QVBoxLayout(self.SanPham)
        buttonLayoutSanPham = QtWidgets.QHBoxLayout()
        self.buttonThemSanPham = QtWidgets.QPushButton("Thêm Sản phẩm", self.SanPham)
        self.buttonSuaSanPham = QtWidgets.QPushButton("Sửa Sản phẩm", self.SanPham)
        self.buttonXoaSanPham = QtWidgets.QPushButton("Xóa Sản phẩm", self.SanPham)
        self.buttonNhapSanPham = QtWidgets.QPushButton("Nhập file excel", self.SanPham)
        self.buttonXuatSanPham = QtWidgets.QPushButton("Xuất file excel", self.SanPham)
        buttonLayoutSanPham.addWidget(self.buttonThemSanPham)
        buttonLayoutSanPham.addWidget(self.buttonSuaSanPham)
        buttonLayoutSanPham.addWidget(self.buttonXoaSanPham)
        buttonLayoutSanPham.addWidget(self.buttonNhapSanPham)
        buttonLayoutSanPham.addWidget(self.buttonXuatSanPham)

        self.buttonThemSanPham.clicked.connect(self.open_add_sp_dialog)
        self.buttonSuaSanPham.clicked.connect(self.open_change_sp)
        self.buttonXoaSanPham.clicked.connect(self.open_delete_sp_dialog)
        self.buttonNhapSanPham.clicked.connect(self.open_import_excel_sp_dialog)
        self.buttonXuatSanPham.clicked.connect(self.export_to_excel_sp)

        sanPhamLayout.addLayout(buttonLayoutSanPham)

        self.sanPhamTable = QtWidgets.QTableWidget(self.SanPham)
        self.sanPhamTable.setObjectName("sanPhamTable")
        self.sanPhamTable.setColumnCount(8)  # 5 columns: Mã khách hàng, Tên khách hàng, SĐT, Địa chỉ, Số đơn đã mua
        self.sanPhamTable.setRowCount(0)  # Start with 0 rows, can be dynamically updated
        # Set table headers
        self.sanPhamTable.setHorizontalHeaderLabels(
            ['ID', 'Mã Sản phẩm', 'Tên Sản phẩm', 'Giới tính', 'Công may', 'Ghi chú', 'Người tạo','Ngày tạo', 'Ngày cập nhật'])
        self.sanPhamTable.setColumnWidth(0, 50)  # ID
        self.sanPhamTable.setColumnWidth(1, 150)  # Mã SP
        self.sanPhamTable.setColumnWidth(2, 180)  # Tên SP
        self.sanPhamTable.setColumnWidth(3, 150)
        self.sanPhamTable.setColumnWidth(4, 200)
        self.sanPhamTable.setColumnWidth(5, 200)
        self.sanPhamTable.setColumnWidth(6, 200)
        self.sanPhamTable.setColumnWidth(7, 200)
        self.sanPhamTable.setColumnWidth(8, 200)
        self.sanPhamTable.setSortingEnabled(True)
        self.sanPhamTable.horizontalHeader().setStretchLastSection(True)
        # Add the table to the main layout
        self.sanPhamTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        sanPhamLayout.addWidget(self.sanPhamTable)
        # End san pham

        # Kho
        self.Kho = QtWidgets.QWidget()
        self.Kho.setObjectName("Kho")
        self.stackedWidget.addWidget(self.Kho)
        khoLayout = QtWidgets.QVBoxLayout(self.Kho)
        supplierLayout = QtWidgets.QVBoxLayout()
        supplierLabel = QtWidgets.QLabel("Nhà cung cấp")
        supplierLabel.setFont(QtGui.QFont('Arial', 16))
        supplierLayout.addWidget(supplierLabel)
        # Buttons for Add, Edit, Delete, Export
        buttonKhoLayout = QtWidgets.QHBoxLayout()
        self.addButtonNCC = QtWidgets.QPushButton("Thêm")
        self.editButtonNCC = QtWidgets.QPushButton("Sửa")
        self.deleteButtonNCC = QtWidgets.QPushButton("Xóa")
        self.importButtonNCC = QtWidgets.QPushButton("Nhập file Excel")
        self.exportButtonNCC = QtWidgets.QPushButton("Xuất file Excel")
        self.addButtonNCC.clicked.connect(self.open_add_ncc_dialog)
        self.editButtonNCC.clicked.connect(self.open_change_ncc_dialog)
        self.deleteButtonNCC.clicked.connect(self.open_delete_ncc_dialog)
        self.importButtonNCC.clicked.connect(self.open_import_excel_ncc_dialog)
        self.exportButtonNCC.clicked.connect(self.export_to_excel_ncc)

        buttonKhoLayout.addWidget(self.addButtonNCC)
        buttonKhoLayout.addWidget(self.editButtonNCC)
        buttonKhoLayout.addWidget(self.deleteButtonNCC)
        buttonKhoLayout.addWidget(self.importButtonNCC)
        buttonKhoLayout.addWidget(self.exportButtonNCC)
        supplierLayout.addLayout(buttonKhoLayout)


        self.supplierTable = QtWidgets.QTableWidget(self.Kho)
        self.supplierTable.setColumnCount(10)  # Example column count
        self.supplierTable.setHorizontalHeaderLabels(
            ["ID", "Mã nhà cung cấp", "Tên nhà cung cấp",
             "Địa chỉ", "SĐT", "Email", "Ghi chú", "Công nợ", "Ngày tạo", "Ngày cập nhật"])
        self.supplierTable.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.supplierTable.horizontalHeader().setStretchLastSection(True)
        self.supplierTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.supplierTable.setSortingEnabled(True)

        supplierLayout.addWidget(self.supplierTable)
        khoLayout.addLayout(supplierLayout, stretch=1)
        # Vải
        vaiLayout = QtWidgets.QVBoxLayout(self.Kho)
        self.materialLabelVai = QtWidgets.QLabel("Vải")
        self.materialLabelVai.setFont(QtGui.QFont('Arial', 16))
        vaiLayout.addWidget(self.materialLabelVai)

        # Buttons for Add, Edit, Delete, Export
        buttonLayoutVai = QtWidgets.QHBoxLayout(self.Kho)
        self.addButtonVai = QtWidgets.QPushButton("Thêm")
        self.editButtonVai = QtWidgets.QPushButton("Sửa")
        self.deleteButtonVai = QtWidgets.QPushButton("Xóa")
        self.importButtonVai = QtWidgets.QPushButton("Nhập file excel")
        self.exportButtonVai = QtWidgets.QPushButton("Xuất file Excel")
        self.addButtonVai.clicked.connect(self.open_add_vai_dialog)
        self.editButtonVai.clicked.connect(self.open_change_vai_dialog)
        self.deleteButtonVai.clicked.connect(self.open_delete_vai_dialog)
        self.importButtonVai.clicked.connect(self.open_import_excel_vai_dialog)
        self.exportButtonVai.clicked.connect(self.export_to_excel_vai)
        buttonLayoutVai.addWidget(self.addButtonVai)
        buttonLayoutVai.addWidget(self.editButtonVai)
        buttonLayoutVai.addWidget(self.deleteButtonVai)
        buttonLayoutVai.addWidget(self.importButtonVai)
        buttonLayoutVai.addWidget(self.exportButtonVai)
        vaiLayout.addLayout(buttonLayoutVai)

        # Table for Vai
        self.materialTableVai = QtWidgets.QTableWidget()
        self.materialTableVai.setColumnCount(9)  # Example column count
        self.materialTableVai.setHorizontalHeaderLabels(
            ["ID", "Mã vải", "Tên Vải", "Mã nhà cung cấp", "Loại Vải", "Màu sắc", "Số lượng", "Giá nhập", "Giá bán"])
        self.materialTableVai.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.materialTableVai.horizontalHeader().setStretchLastSection(True)
        self.materialTableVai.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.materialTableVai.setSortingEnabled(True)

        vaiLayout.addWidget(self.materialTableVai)
        khoLayout.addLayout(vaiLayout)

        # Material Section Vat tu

        VatTuLayout = QtWidgets.QVBoxLayout(self.Kho)
        self.VatTuLabel = QtWidgets.QLabel("Vật Tư")
        self.VatTuLabel.setFont(QtGui.QFont('Arial', 16))
        VatTuLayout.addWidget(self.VatTuLabel)
        # Buttons for Add, Edit, Delete, Export
        buttonVatTuLayout = QtWidgets.QHBoxLayout()
        self.addButtonVatTu = QtWidgets.QPushButton("Thêm")
        self.editButtonVatTu = QtWidgets.QPushButton("Sửa")
        self.deleteButtonVatTu = QtWidgets.QPushButton("Xóa")
        self.importButtonVatTu = QtWidgets.QPushButton("Nhập file Excel")
        self.exportButtonVatTu = QtWidgets.QPushButton("Xuất file Excel")
        self.addButtonVatTu.clicked.connect(self.open_add_vt_dialog)
        self.editButtonVatTu.clicked.connect(self.open_change_vt_dialog)
        self.deleteButtonVatTu.clicked.connect(self.open_delete_vt_dialog)
        self.importButtonVatTu.clicked.connect(self.open_import_excel_vt_dialog)
        self.exportButtonVatTu.clicked.connect(self.export_to_excel_vt)


        buttonVatTuLayout.addWidget(self.addButtonVatTu)
        buttonVatTuLayout.addWidget(self.editButtonVatTu)
        buttonVatTuLayout.addWidget(self.deleteButtonVatTu)
        buttonVatTuLayout.addWidget(self.importButtonVatTu)
        buttonVatTuLayout.addWidget(self.exportButtonVatTu)
        VatTuLayout.addLayout(buttonVatTuLayout)
        self.VatTuTable = QtWidgets.QTableWidget(self.Kho)  # Example row count
        self.VatTuTable.setColumnCount(11)  # Example column count
        self.VatTuTable.setHorizontalHeaderLabels(
            ["ID", "Mã Loại vật tư", "Mã vật tư", "Tên", "kho", "Giá nhập", "Giá nhập một Mét", "Giá may áo", "Giá may quần",
             "Giá may cả bộ", "Ghi chú"])
        self.VatTuTable.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.VatTuTable.horizontalHeader().setStretchLastSection(True)
        self.VatTuTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.VatTuTable.setSortingEnabled(True)
        VatTuLayout.addWidget(self.VatTuTable)
        khoLayout.addLayout(VatTuLayout)

        self.VatTuTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.materialTableVai.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.supplierTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        #end kho

        self.PhanTich = QtWidgets.QWidget()
        self.PhanTich.setObjectName("PhanTich")
        self.stackedWidget.addWidget(self.PhanTich)

        self.bodyLayout.addWidget(self.stackedWidget)

        self.mainLayout.addWidget(self.body)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.buttonExit.clicked.connect(MainWindow.close)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect buttons to corresponding pages
        self.buttonTrangChu.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.buttonDonHang.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        self.buttonKhachHang.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.buttonSanPham.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
        self.buttonKho.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(4))
        # self.buttonPhanTich.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(5))
        self.load_data_into_tables()
        # Add styles
        self.addStyles()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.labelLOGO.setText(_translate("MainWindow",
                                          "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Như Danh tailor</span></p></body></html>"))
        self.buttonExit.setText(_translate("MainWindow", "Exit"))
        # self.buttonPhanTich.setText(_translate("MainWindow", "Phân tích"))
        self.buttonKho.setText(_translate("MainWindow", "Kho"))
        self.buttonSanPham.setText(_translate("MainWindow", "Sản phẩm"))
        self.buttonDonHang.setText(_translate("MainWindow", "Đơn hàng"))
        self.buttonKhachHang.setText(_translate("MainWindow", "Khách hàng"))
        self.buttonTrangChu.setText(_translate("MainWindow", "Phân tích"))
        self.buttonTimKiem.setText(_translate("MainWindow", "Tìm kiếm"))
        # self.buttonAdmin.setText(_translate("MainWindow", "Admin"))
        self.lineEditTimKiem.setPlaceholderText(_translate("MainWindow", "Tìm kiếm thông tin"))
        self.pushButtonDHAddAo.setText(_translate("MainWindow", "Add"))
        self.label_DHSL.setText(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">SL:</span></p></body></html>"))
        self.label_DHTTien.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">T.Tiền:</span></p></body></html>"))
        self.labelDHAoDai.setText(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Dài</span></p></body></html>"))
        self.labelDHAoMong.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Mông</span></p></body></html>"))
        self.labelDHAoCo.setText(_translate("MainWindow",
                                            "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Cổ</span></p></body></html>"))
        self.labelDHAoLaCo.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Lá cổ</span></p></body></html>"))
        self.labelDHAoTay.setText(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Tay</span></p></body></html>"))
        self.labelDHAoVai.setText(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Vai</span></p></body></html>"))
        self.labelDHAoEo.setText(_translate("MainWindow",
                                            "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Eo</span></p></body></html>"))
        self.labelDHAoNguc.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Ngực</span></p></body></html>"))
        self.pushButtonDHAddQuan.setText(_translate("MainWindow", "Add"))
        self.label_DHSL_2.setText(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">SL:</span></p></body></html>"))
        self.label_DHTTien_2.setText(_translate("MainWindow",
                                                "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">T.Tiền:</span></p></body></html>"))
        self.labelDHQuanOng.setText(_translate("MainWindow",
                                               "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Ống</span></p></body></html>"))
        self.llabelDHQuanL.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">L</span></p></body></html>"))
        self.labelDHQuanX.setText(_translate("MainWindow",
                                             "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">X</span></p></body></html>"))
        self.labelDHQuanDai.setText(_translate("MainWindow",
                                               "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Dài</span></p></body></html>"))
        self.labelDHQuanLung.setText(_translate("MainWindow",
                                                "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Lưng</span></p></body></html>"))
        self.labelDHQuanMong.setText(_translate("MainWindow",
                                                "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Mông</span></p></body></html>"))
        self.labelDHQuanVe.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Vê</span></p></body></html>"))
        self.labelDHQuanGoi.setText(_translate("MainWindow",
                                               "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Gối</span></p></body></html>"))
        self.labelDHQuanTC.setText(_translate("MainWindow",
                                              "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">TC</span></p></body></html>"))
        self.labelDHQuanVDay.setText(_translate("MainWindow",
                                                "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">V Đáy</span></p></body></html>"))
        self.lineEditDHMaHD.setStyleSheet("border: none;")
        self.labelDHAoDai.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoMong.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoCo.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoLaCo.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoTay.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoVai.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoEo.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHAoNguc.setStyleSheet("border: 1px solid #ccc;")

        self.labelDHQuanOng.setStyleSheet("border: 1px solid #ccc;")
        self.llabelDHQuanL.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanX.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanDai.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanLung.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanMong.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanVe.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanGoi.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanTC.setStyleSheet("border: 1px solid #ccc;")
        self.labelDHQuanVDay.setStyleSheet("border: 1px solid #ccc;")

    def addStyles(self):
        self.centralwidget.setStyleSheet("""
            QWidget {
                font-family: Arial, sans-serif;
                background-color: #f0f0f0;
                font-size: 12pt;
            }
            QWidget {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            font-size: 12pt;
        }
        
        QPushButton {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 8px;
        }

        QPushButton:hover {
            background-color: #45a049;
        }

        QLineEdit {
            padding: 6px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }

        QLabel {
            font-size: 14px;
            font-weight: bold;
            color: #333;
        }

        QTableView {
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }
        """)
        self.DonHang.setStyleSheet("""
                    QLineEdit, QComboBox, QDateEdit {
                        border: 2px solid #ccc;
                        border-radius: 5px;
                        padding: 8px;
                        font-size: 14px;
                    }
                    QComboBox::drop-down {
                        width: 20px;
                    }
        """)
        self.Kho.setStyleSheet("""QPushButton {
                background-color: #2980b9;
                color: white;
                border: none;
                padding: 10px 20px;
                margin-bottom: 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #3498db;
            }
            QTableWidget {
                background-color: #F9F9F9;  /* Light gray background */
                alternate-background-color: #EAF1FB;  /* Slightly different color for alternate rows */
                selection-background-color: #B2DFDB;  /* Background color for selected cells */
                selection-color: #000000;  /* Text color for selected cells */
                gridline-color: #D3D3D3;  /* Grid line color */
                font-size: 14px;  /* Font size */
            }
            QHeaderView::section {
                background-color: #607D8B;  /* Header background color */
                color: white;  /* Header text color */
                padding: 5px;  /* Padding for header cells */
                font-size: 14px;  /* Font size for header text */
                border: 1px solid #D3D3D3;  /* Border around header cells */
            }
            QTableWidget QTableCornerButton::section {
                background-color: #607D8B;  /* Corner button background color */
                border: 1px solid #D3D3D3;  /* Border around corner button */
            }
            QTableWidget::item {
                padding: 5px;  /* Padding for table cells */
            }
        """)
        self.KhachHang.setStyleSheet("""
         QPushButton {
                background-color: #2980b9;
                color: white;
                border: none;
                padding: 10px 20px;
                margin-bottom: 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #3498db;
            }
            QTableWidget {
                background-color: #F9F9F9;  /* Light gray background */
                alternate-background-color: #EAF1FB;  /* Slightly different color for alternate rows */
                selection-background-color: #B2DFDB;  /* Background color for selected cells */
                selection-color: #000000;  /* Text color for selected cells */
                gridline-color: #D3D3D3;  /* Grid line color */
                font-size: 14px;  /* Font size */
            }
            QHeaderView::section {
                background-color: #607D8B;  /* Header background color */
                color: white;  /* Header text color */
                padding: 5px;  /* Padding for header cells */
                font-size: 14px;  /* Font size for header text */
                border: 1px solid #D3D3D3;  /* Border around header cells */
            }
            QTableWidget QTableCornerButton::section {
                background-color: #607D8B;  /* Corner button background color */
                border: 1px solid #D3D3D3;  /* Border around corner button */
            }
            QTableWidget::item {
                padding: 5px;  /* Padding for table cells */
            }
        """)
        self.menuBar.setStyleSheet("""
            QWidget#menuBar {
                background-color: #2c3e50;
                border-top-left-radius: 10px;
                border-bottom-left-radius: 10px;
                padding: 10px;
            }
            QLabel {
                background-color: #2c3e50;
                color: white;
                margin-bottom: 10px;
            }
            QPushButton {
                background-color: #2980b9;
                color: white;
                border: none;
                padding: 10px 20px;
                margin-bottom: 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #3498db;
            }
        """)
        self.header.setStyleSheet("""
            QWidget#header {
                background-color: #ecf0f1;
                border-radius: 10px;
                padding: 10px;
            }
            QLineEdit {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton {
                background-color: #2980b9;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #3498db;
            }
        """)

    def connect_to_server(self):
        try:
            conn = pyodbc.connect(
                'DRIVER={ODBC Driver 17 for SQL Server};'
                'SERVER=DESKTOP-BOB8B5B\\SQLEXPRESS;'  # Connect to the named instance of SQL Server
                'DATABASE=NhuDanhTest;'  # Connect to the master database initially
                'Trusted_Connection=yes;'  # Use Windows Authentication
            )
            return conn
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, 'Database Connection Error', str(e))
            sys.exit(1)  # Exit the application if the connection fails

    def show_connect_dialog(self):
        dialog = ConnectToServerDialog()
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            print('Connected to the database successfully!')

    def open_change_sp(self, item):
        dialog = ChangeDataSPDialog(self.conn)  # Assuming ChangeKhachHangDialog is your dialog class
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_sp(data)
                self.reload_table_data()

    def open_import_excel_sp_dialog(self):
        dialog = ImportExcelSPDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.reload_table_data()
    def load_data_into_tables(self):
        try:
            cursor = self.conn.cursor()

            # Load data into materialTableVai
            cursor.execute("SELECT * FROM [dbo].[Vai] ORDER BY ID")
            rows = cursor.fetchall()
            self.load_data_into_table_widget(rows, self.materialTableVai)

            # Load data into supplierTable
            cursor.execute("SELECT * FROM [dbo].[NhaCungCap1] ORDER BY ID")
            rows = cursor.fetchall()
            self.load_data_into_table_widget(rows, self.supplierTable)

            # Load data into VatTuTable
            cursor.execute("SELECT * FROM [dbo].[VatTu] ORDER BY ID")
            rows = cursor.fetchall()
            self.load_data_into_table_widget(rows, self.VatTuTable)

            cursor.execute("SELECT * FROM [dbo].[KhachHang] ORDER BY ID")
            rows = cursor.fetchall()
            self.load_data_into_table_widget(rows, self.khachHangTable)

            cursor.execute("SELECT * FROM [dbo].[SanPham1] ORDER BY ID")
            rows = cursor.fetchall()
            self.load_data_into_table_widget(rows, self.sanPhamTable)
        except pyodbc.Error as e:
            print(f"Error loading data: {str(e)}")

        except Exception as e:
            print(f"Error loading data: {str(e)}")

    def load_data_into_table_widget(self, rows, table_widget):
        table_widget.setSortingEnabled(False)
        table_widget.setRowCount(0)  # Clear existing rows

        for row_index, row_data in enumerate(rows):
            table_widget.insertRow(row_index)
            for col_index, col_data in enumerate(row_data):
                item = QtWidgets.QTableWidgetItem(str(col_data))
                table_widget.setItem(row_index, col_index, item)

        table_widget.setSortingEnabled(True)

    def show_connection_error_message(self, error_message):
        QtWidgets.QMessageBox.critical(self, 'Database Connection Error', error_message)

    def show_query_execution_error_message(self, error_message):
        QtWidgets.QMessageBox.critical(self, 'Query Execution Error', error_message)

    def reload_table_data(self):
        self.load_data_into_tables()
# DEF Don Hang
    # DEF Khach Hang
    def open_add_kh_dialog(self):
        dialog = AddDataKhachHangDialog()
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Ensure data is not empty
                self.add_new_row_kh(data)
                self.reload_table_data()

    def open_change_kh_dialog(self):
        dialog = ChangeDataKHDialog(self.conn)  # Assuming ChangeKhachHangDialog is your dialog class
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_kh(data)
                self.reload_table_data()

    def open_delete_kh_dialog(self):
        dialog = DeleteKHDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            dialog.delete()
            self.reload_table_data()

    def open_import_excel_kh_dialog(self):
        dialog = ImportExcelKHDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.reload_table_data()

    def export_to_excel_kh(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute(
                "SELECT ID, MaKhachHang, TenKhachHang, NgaySinh, DienThoai, DiaChi, Email, SoDonDaMua, GhiChu, NgayTao FROM KhachHang ORDER BY ID")
            rows = cursor.fetchall()

            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            df = pd.DataFrame(rows_list,
                              columns=['ID', 'MaKhachHang', 'TenKhachHang', 'NgaySinh', 'DienThoai', 'DiaChi', 'Email',
                                       'GhiChu', 'SoDonDaMua', 'NgayTao'])

            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory,
                                                                 "Excel Files (*.xlsx)", options=options)

            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)

        except Exception as e:
            print(f"Error exporting data to Excel: {e}")
            QtWidgets.QMessageBox.critical(self, "Error", f"Failed to export data: {e}")

    def update_row_kh(self, data):
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE KhachHang
                    SET MaKhachHang = ?, TenKhachHang = ?,NgaySinh = ?, DienThoai = ?, DiaChi = ?, Email = ?, SoDonDaMua = ?, GhiChu = ?, NgayCapNhat = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
            data_with_date = (*data[:-1], current_date, data[-1])  # Append the current date before the ID

            print("Data tuple with date:", data_with_date)  # Debug print

            cursor.execute(query, data_with_date)
            self.conn.commit()

            print("Data updated successfully:", data_with_date)  # Debug print

        except pyodbc.Error as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error


    def add_new_row_kh(self, data):
        print(data)
        try:
            cursor = self.conn.cursor()
            query = """
                    INSERT INTO KhachHang (MaKhachHang, TenKhachHang, NgaySinh, DienThoai, DiaChi, Email, SoDonDaMua, GhiChu, NgayTao)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data[:-1], current_date)  # Exclude ma_hoa_don_items list from the main data tuple
            cursor.execute(query, data_with_date)
            # for ma_phieu_xuat in data[-1]:  # Insert ma_phieu_xuat_items
            #     cursor.execute("""
            #         INSERT INTO PhieuXuat (MaPhieuXuat, MaKhachHang, NgayTao)
            #         VALUES (?, ?, ?)
            #     """, (ma_phieu_xuat, khach_hang_id, current_date))

            self.conn.commit()
            print(data_with_date)
        except pyodbc.IntegrityError as e:
            QtWidgets.QMessageBox.critical(self, "Lỗi Integrity", f"Lỗi: {str(e)}")
            self.conn.rollback()
        except pyodbc.Error as e:
            QtWidgets.QMessageBox.critical(self, "Lỗi CSDL", f"Lỗi chèn dữ liệu: {str(e)}")
            self.conn.rollback()
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Lỗi khác", f"Lỗi: {str(e)}")
            self.conn.rollback()
# DEF SanPham
    def open_add_sp_dialog(self):
        dialog = AddSPDialog()
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Ensure data is not empty
                self.add_new_row_sp(data)
                self.reload_table_data()

    def add_new_row_sp(self, data):
        print(data)
        try:
            cursor = self.conn.cursor()
            query = """
                    INSERT INTO SanPham1 (maSanPham, tenSanPham, maGioiTinh, congMay, ghiChu, nguoiTao, ngayTao, NgayCapNhat)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data, current_date, current_date)
            cursor.execute(query, data_with_date)
            print(data_with_date)
            self.conn.commit()
            print(data_with_date)
            print(data[0])
        except pyodbc.Error as e:
            print(f"Error inserting data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error inserting data: {str(e)}")
            self.conn.rollback()  # Rollback on error

    def update_row_sp(self, data):
        print(data)
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE SanPham1
                    SET maSanPham = ?, tenSanPham = ?, maGioiTinh = ?, congMay = ?, ghiChu = ?, nguoiTao = ?, NgayCapNhat = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            maSanPham = str(data[1])  # varchar(50)
            tenSanPham = str(data[2])  # nvarchar(100)
            maGioiTinh = str(data[3])  # nvarchar(10)
            congMay = str(data[4])
            ghiChu = str(data[5])  # nvarchar(200)
            nguoiTao = str(data[6])  # nvarchar(50)
            ngayCapNhat = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # Đảm bảo ID là kiểu bigint (int trong Python)
            ID = int(data[0])  # Chuyển đổi ID thành kiểu int

            data_with_date = (maSanPham, tenSanPham, maGioiTinh, congMay, ghiChu, nguoiTao, ngayCapNhat, ID)

            print("Data tuple with date:", data_with_date)  # Debug print

            cursor.execute(query, data_with_date)
            self.conn.commit()

            print("Data updated successfully:", data_with_date)  # Debug print

        except pyodbc.Error as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback khi có lỗi
        except Exception as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback khi có lỗi

    def open_delete_sp_dialog(self):
        dialog = DeleteSPDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            dialog.delete()
            self.reload_table_data()

    def export_to_excel_sp(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute("SELECT ID, maSanPham, tenSanPham, maGioiTinh, congMay, ghiChu, NguoiTao, NgayTao, NgayCapNhat FROM SanPham1 ORDER BY ID")
            rows = cursor.fetchall()
            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            # Create DataFrame from list of lists
            df = pd.DataFrame(rows_list,
                              columns=['ID', 'maSanPham', 'tenSanPham', 'maGioiTinh', 'congMay', 'ghiChu', 'NguoiTao', 'NgayTao', 'NgayCapNhat'])
            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory, "Excel Files (*.xlsx)", options=options)
            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)

        except Exception as e:
            print(f"Error exporting data to Excel: {e}")

# PhieuXuat
    def open_change_phieu_xuat(self):
        dialog = ChangeDataPhieuXuatDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_phieu_xuat(data)
                self.reload_table_data()

    def update_row_phieu_xuat(self, data):
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE PhieuXuat
                    SET MaPhieuXuat = ?, NgayMay = ?, NgayGiao = ?, NgayTatToan = ?, TatToan = ?, SoDienThoaiKH = ?, TongCongSoLuong = ?, TongCongChietKhau = ?, TongCongTien = ?,
                    TongTienCong = ?, TongTienVai = ?, NgayTraTruoc = ?, TraTruoc = ?, ConNo = ?, SoLanDaTraNo = ?, GhiChu = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data[:-1], current_date, data[-1])  # Append the current date before the ID

            print("Data tuple with date:", data_with_date)  # Debug print

            cursor.execute(query, data_with_date)
            self.conn.commit()

            print("Data updated successfully:", data_with_date)  # Debug print

        except pyodbc.Error as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error

    import os
    import pandas as pd
    from PyQt5 import QtWidgets

    def export_to_excel_phieuxuat(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute(
                "SELECT MaPhieuXuat, NgayMay, NgayGiao, NgayTatToan, TatToan, SoDienThoaiKH, TongCongSoLuong, "
                "TongCongChietKhau, TongCongTien, TongTienCong, TongTienVai, NgayTraTruoc, TraTruoc, ConNo, "
                "SoLanDaTraNo, GhiChu FROM PhieuXuat ORDER BY MaPhieuXuat"
            )
            rows = cursor.fetchall()

            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            df = pd.DataFrame(
                rows_list,
                columns=[
                    'MaPhieuXuat', 'NgayMay', 'NgayGiao', 'NgayTatToan', 'TatToan', 'SoDienThoaiKH',
                    'TongCongSoLuong', 'TongCongChietKhau', 'TongCongTien', 'TongTienCong', 'TongTienVai',
                    'NgayTraTruoc', 'TraTruoc', 'ConNo', 'SoLanDaTraNo', 'GhiChu'
                ]
            )

            # Open a file save dialog
            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory,
                                                                 "Excel Files (*.xlsx)", options=options)

            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)
                print("Data exported successfully to:", file_name)

        except Exception as e:
            print(f"Error exporting data to Excel: {e}")

    import pandas as pd
    from PyQt5 import QtWidgets
    import os
    def open_change_ct_phieu_xuat(self):
        dialog = ChangeDataCTPhieuXuatDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_ct_phieu_xuat(data)
                self.reload_table_data()

    def update_row_ct_phieu_xuat(self, data):
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE ChiTietPhieuXuat
                    SET LoaiAo = ?, TenHinhAo = ?, TongSoLuongAo = ?, TongTienAo = ?, DaiAoTren = ?, DaiAoDuoi = ?, Vai = ?, XuoiVai = ?, 
                        ChomVai = ?, HaVai = ?, Tay = ?, BapTay = ?, KhuyuTay = ?, Nguc = ?, HaNguc = ?, DoGiamNguc = ?, Eo = ?, 
                        MongAo = ?, Co = ?, LaCo = ?, MaTrangThaiAo = ?, LoaiVaiAo = ?, GhiChuAo = ?, LoaiQuan = ?, TenHinhQuan = ?, 
                        TongSoLuongQuan = ?, TongTienQuan = ?, DaiQuan = ?, Lung = ?, Mong = ?, Ve = ?, Goi = ?, TC = ?, Ong = ?, 
                        VDay = ?, Len = ?, Xuong = ?, MaTrangThaiQuan = ?, LoaiVaiQuan = ?, GhiChuQuan = ?, NgayTao = ?, NgayCapNhat = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftimestrftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data[:-1], current_date, data[-1])  # Append the current date before the ID

            print("Data tuple with date:", data_with_date)  # Debug print

            cursor.execute(query, data_with_date)
            self.conn.commit()

            print("Data updated successfully:", data_with_date)  # Debug print

        except pyodbc.Error as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error


    def export_to_excel_ct_phieuxuat(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute(
                "SELECT maPhieuXuat, loaiAo, tenHinhAo, tongSoLuongAo, tongTienAo, daiAoTren, daiAoDuoi, vai, "
                "xuoiVai, chomVai, haVai, tay, bapTay, khuyuTay, nguc, haNguc, doGiamNguc, eo, mongAo, co, laCo, "
                "maTrangThaiAo, loaiVaiAo, ghiChuAo, loaiQuan, tenHinhQuan, tongSoLuongQuan, tongTienQuan, "
                "daiQuan, lung, mong, ve, goi, TC, ong, vDay, len, xuong, maTrangThaiQuan, loaiVaiQuan, "
                "ghiChuQuan, ngayTao, ngayCapNhat FROM ChiTietPhieuXuat ORDER BY ID"
            )
            rows = cursor.fetchall()

            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            df = pd.DataFrame(
                rows_list,
                columns=[
                    'maPhieuXuat', 'loaiAo', 'tenHinhAo', 'tongSoLuongAo', 'tongTienAo', 'daiAoTren', 'daiAoDuoi',
                    'vai', 'xuoiVai', 'chomVai', 'haVai', 'tay', 'bapTay', 'khuyuTay', 'nguc', 'haNguc', 'doGiamNguc',
                    'eo', 'mongAo', 'co', 'laCo', 'maTrangThaiAo', 'loaiVaiAo', 'ghiChuAo', 'loaiQuan', 'tenHinhQuan',
                    'tongSoLuongQuan', 'tongTienQuan', 'daiQuan', 'lung', 'mong', 've', 'goi', 'TC', 'ong', 'vDay',
                    'len', 'xuong', 'maTrangThaiQuan', 'loaiVaiQuan', 'ghiChuQuan', 'ngayTao', 'ngayCapNhat'
                ]
            )

            # Open a file save dialog
            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory,
                                                                 "Excel Files (*.xlsx)", options=options)

            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)
                print("Data exported successfully to:", file_name)
        except Exception as e:
            print("An error occurred:", str(e))

    # DEF NCC
    def open_add_ncc_dialog(self):
        dialog = AddDataNCCDialog()
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Ensure data is not empty
                self.add_new_row_ncc(data)
                self.reload_table_data()

    def open_change_ncc_dialog(self):
        dialog = ChangeNCCDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_ncc(data)
                self.reload_table_data()

    def open_delete_ncc_dialog(self):
        dialog = DeleteNCCDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            dialog.delete()
            self.reload_table_data()

    def open_import_excel_ncc_dialog(self):
        dialog = ImportExcelNCCDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.reload_table_data()

    def export_to_excel_ncc(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute("SELECT ID, MaNhaCungCap, TenNhaCungCap, DiaChi, DienThoai, Email, GhiChu, CongNo, NgayTao, NgayCapNhat FROM NhaCungCap1 ORDER BY ID")
            rows = cursor.fetchall()
            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            # Create DataFrame from list of lists
            df = pd.DataFrame(rows_list,
                              columns=['ID', 'MaNhaCungCap', 'TenNhaCungCap', 'DiaChi', 'DienThoai', 'Email', 'GhiChu', 'CongNo', "NgayTao", "NgayCapNhat"])
            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory, "Excel Files (*.xlsx)", options=options)
            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)

        except Exception as e:
            print(f"Error exporting data to Excel: {e}")

    def add_new_row_ncc(self, data):
        print(data)
        try:
            cursor = self.conn.cursor()
            query = """
                    INSERT INTO NhaCungCap1 (MaNhaCungCap, TenNhaCungCap, DiaChi, DienThoai, Email, GhiChu, CongNo, NgayTao)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data, current_date)
            cursor.execute(query, data_with_date)
            print(data_with_date)
            self.conn.commit()
            print(data_with_date)


        except pyodbc.Error as e:
            print(f"Error inserting data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error inserting data: {str(e)}")
            self.conn.rollback()  # Rollback on error

    def update_row_ncc(self, data):
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE NhaCungCap1
                    SET MaNhaCungCap = ?, TenNhaCungCap = ?, DiaChi = ?, DienThoai = ?, Email = ?, GhiChu = ?, CongNo = ?, NgayCapNhat = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data[:-1], current_date, data[-1])  # Append the current date before the ID

            print("Data tuple with date:", data_with_date)  # Debug print

            cursor.execute(query, data_with_date)
            self.conn.commit()

            print("Data updated successfully:", data_with_date)  # Debug print

        except pyodbc.Error as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error updating data: {str(e)}")
            self.conn.rollback()  # Rollback on error
# DEF VAI
    def open_add_vai_dialog(self):
        dialog = AddDataVaiDialog()
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Ensure data is not empty
                self.add_new_row_vai(data)
                self.reload_table_data()


    def open_change_vai_dialog(self):
        dialog = ChangeVaiDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_vai(data)
                self.reload_table_data()

    def open_delete_vai_dialog(self):
        dialog = DeleteVaiDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            dialog.delete()
            self.reload_table_data()

    def open_import_excel_vai_dialog(self):
        dialog = ImportExcelVaiDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.reload_table_data()

    def export_to_excel_vai(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute("SELECT ID, MaVai, TenVai, MaNhaCungCap, LoaiVai, MauSac, SoLuong, GiaNhap, NgayNhap, NgayCapNhat FROM Vai ORDER BY ID")
            rows = cursor.fetchall()
            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            # Create DataFrame from list of lists
            df = pd.DataFrame(rows_list,
                              columns=['ID', 'MaVai', 'TenVai', 'MaNhaCungCap', 'LoaiVai', 'MauSac', 'SoLuong', 'GiaNhap', "NgayNhap", "NgayCapNhat"])
            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory, "Excel Files (*.xlsx)", options=options)
            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)

        except Exception as e:
            print(f"Error exporting data to Excel: {e}")


    def add_new_row_vai(self, data):
        print(data)
        try:
            cursor = self.conn.cursor()
            query = """
                    INSERT INTO Vai (MaVai, TenVai, MaNhaCungCap, LoaiVai, MauSac, SoLuong, GiaNhap, NgayNhap)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data, current_date)
            cursor.execute(query, data_with_date)
            self.conn.commit()
            print(data_with_date)

        except pyodbc.Error as e:
            print(f"Error inserting data 1: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error inserting data 2: {str(e)}")
            self.conn.rollback()  # Rollback on error


    def update_row_vai(self, data):
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE Vai
                    SET MaVai = ?, TenVai = ?, MaNhaCungCap = ?, LoaiVai = ?, MauSac = ?, SoLuong = ?, GiaNhap = ?, NgayCapNhat = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data[:-1], current_date, data[-1])  # Append the current date before the ID

            print("Data tuple with date:", data_with_date)  # Debug print

            cursor.execute(query, data_with_date)
            self.conn.commit()
            print("Data updated successfully")
        except Exception as e:
            error_message = f"Error updating data: {str(e)}"
            self.show_query_execution_error_message(error_message)

# def vat tu
    def open_add_vt_dialog(self):
        dialog = AddDataVTDialog()
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Ensure data is not empty
                self.add_new_row_vt(data)
                self.reload_table_data()

    def open_change_vt_dialog(self):
        dialog = ChangeVTDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            data = dialog.get_data()
            if data is not None:  # Check if data is not None before updating
                self.update_row_vt(data)
                self.reload_table_data()

    def open_delete_vt_dialog(self):
        dialog = DeleteVTDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            dialog.delete()
            self.reload_table_data()

    def open_import_excel_vt_dialog(self):
        dialog = ImportExcelVTDialog(self.conn)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            self.reload_table_data()

    def export_to_excel_vt(self):
        try:
            # Fetch data from the database
            cursor = self.conn.cursor()
            cursor.execute("SELECT ID, MaLoaiVatTu, MaVatTu, TenVatTu, Kho, GiaNhap, GiaMotMet, GiaMayAo, GiaMayQuan, GiaNguyenBo, GhiChu, NgayTao, NgayCapNhat FROM VatTu ORDER BY ID")
            rows = cursor.fetchall()
            # Create a DataFrame from the fetched data
            rows_list = [list(row) for row in rows]
            # Create DataFrame from list of lists
            df = pd.DataFrame(rows_list,
                              columns=['ID', 'MaLoaiVatTu', 'MaVatTu', 'TenVatTu', 'Kho', 'GiaNhap', 'GiaMotMet', 'GiaMayAo', "GiaMayQuan", "GiaNguyenBo", "GhiChu", "NgayTao", "NgayCapNhat"])
            options = QtWidgets.QFileDialog.Options()
            default_directory = os.path.expanduser("~")  # Home directory of the current user
            file_name, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", default_directory, "Excel Files (*.xlsx)", options=options)
            if file_name:
                # Export DataFrame to Excel
                df.to_excel(file_name, index=False)

        except Exception as e:
            print(f"Error exporting data to Excel: {e}")
    def add_new_row_vt(self, data):
        print(data)
        try:
            cursor = self.conn.cursor()
            query = """
                    INSERT INTO VatTu (MaLoaiVatTu, MaVatTu, TenVatTu, Kho, GiaNhap, GiaMotMet, GiaMayAo, GiaMayQuan, GiaNguyenBo, GhiChu, NgayTao)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data, current_date)
            cursor.execute(query, data_with_date)
            print(data_with_date)
            self.conn.commit()
            print(data_with_date)

        except pyodbc.Error as e:
            print(f"Error inserting data: {str(e)}")
            self.conn.rollback()  # Rollback on error
        except Exception as e:
            print(f"Error inserting data: {str(e)}")
            self.conn.rollback()  # Rollback on error


    def update_row_vt(self, data):
        try:
            cursor = self.conn.cursor()
            query = """
                    UPDATE VatTu
                    SET MaLoaiVatTu = ?, MaVatTu = ?, TenVatTu = ?, Kho = ?, GiaNhap = ?, GiaMotMet = ?, GiaMayAo = ?, GiaMayQuan = ?, GiaNguyenBo = ?, GhiChu = ?, NgayCapNhat = ?
                    WHERE ID = ?
                    """
            current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            data_with_date = (*data[:-1], current_date, data[-1])  # Append the current date before the ID

            print("Data tuple with date:", data_with_date)  # Debug print
            cursor.execute(query, data_with_date)
            self.conn.commit()
            print("Data updated successfully")
        except Exception as e:
            error_message = f"Error updating data: {str(e)}"
            self.show_query_execution_error_message(error_message)

    def searchDatabase(self):
        keyword = self.lineEditTimKiem.text()
        if not keyword:
            return


        cursor = self.conn.cursor()

        # Get all table names
        cursor.execute(
            "SELECT table_name FROM information_schema.tables WHERE table_type='BASE TABLE' AND table_catalog='NhuDanhTest'")
        tables = cursor.fetchall()

        all_results = []

        for table in tables:
            table_name = table[0]
            # Get all column names and data types for the current table
            cursor.execute(
                f"SELECT column_name, data_type FROM information_schema.columns WHERE table_name='{table_name}'")
            columns = cursor.fetchall()

            # Create a dynamic query for the current table
            query_parts = []
            params = []
            for col_name, col_type in columns:
                if col_type in ('nvarchar', 'varchar', 'char', 'text', 'decimal'):
                    self.resultTable.clear()
                    query_parts.append(f"{col_name} LIKE ?")
                    params.append('%' + keyword + '%')


            if not query_parts:
                continue

            query = f"SELECT * FROM {table_name} WHERE " + " OR ".join(query_parts)

            cursor.execute(query, params)
            results = cursor.fetchall()
            for result in results:
                all_results.append((table_name,) + tuple(result))

        # Update the result table
        if all_results:
            column_names = ["Table Name", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14"]
            self.resultTable.setColumnCount(len(column_names))
            self.resultTable.setHorizontalHeaderLabels(column_names)
            self.resultTable.setRowCount(len(all_results))
            for row_idx, row_data in enumerate(all_results):
                for col_idx, col_data in enumerate(row_data):
                    self.resultTable.setItem(row_idx, col_idx, QtWidgets.QTableWidgetItem(str(col_data)))
        else:
            self.resultTable.setRowCount(0)

    def add_data_to_table_ao(self):
        type = self.comboBoxDHLoaiAo.currentText()
        loaiVai = self.lineEditDHLoaiVai.text()
        quantity = self.lineEdit_DHSLAo.text()
        query = "SELECT congMay FROM SanPham1 WHERE tenSanPham = ?"
        cursor = self.conn.cursor()
        cursor.execute(query, (type,))
        result = cursor.fetchone()
        congMay = int(result[0]) if result else "0"
        tienVai = int(self.lineEdit_DHTTienAo.text()) - congMay

        check_vai_query = "SELECT TenVai FROM Vai WHERE TenVai = ?"
        cursor.execute(check_vai_query, (loaiVai,))
        vai_result = cursor.fetchone()

        if not vai_result:
            # Nếu loaiVai không tồn tại, thêm mới vào bảng Vai
            insert_vai_query = """
                INSERT INTO Vai (MaVai, TenVai, MaNhaCungCap, GiaBan, NgayNhap)
                VALUES (?, ?, ?, ?, ?)
            """
            ngay_nhap = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Lấy thời gian hiện tại làm NgayNhap
            cursor.execute(insert_vai_query, (loaiVai, loaiVai, loaiVai, tienVai, ngay_nhap))
            self.conn.commit()  # Lưu thay đổi vào cơ sở dữ liệu
            print(f"Added new fabric: {loaiVai} with price: {tienVai} and entry date: {ngay_nhap}")

        price = self.lineEdit_DHTTienAo.text()
        length1 = self.lineEditDHAoDai11.text()
        length2 = self.lineEditHDAoDai21.text()
        shoulder1 = self.lineEditDHAoVai11.text()
        shoulder2 = self.lineEditDHAoVai12.text()
        shoulder3 = self.lineEditDHAoVai13.text()
        shoulder4 = self.lineEditDHAoVai21.text()
        sleeve1 = self.lineEditDHAoTay11.text()
        sleeve2 = self.lineEditDHAoTay12.text()
        sleeve3 = self.lineEditDHAoTay21.text()
        chest1 = self.lineEditDHAoNguc11.text()
        chest2 = self.lineEditDHAoNguc12.text()
        chest3 = self.lineEditDHAoNguc21.text()
        eo = self.lineEditDHAoEo.text()
        hip = self.lineEditDHAoMong.text()
        co = self.lineEditDHAoCo.text()
        laCo = self.lineEditDHAoLaCo.text()
        trangThai = self.comboBoxDHAoChuaCat.currentText()
        ghiChu = self.lineEditDHAoGhiChu.text()
        row = [QStandardItem(str(field)) for field in [type, loaiVai, quantity, congMay, tienVai, price, length1, length2, shoulder4, shoulder1, shoulder2, shoulder3, sleeve3, sleeve1, sleeve2, chest3, chest1, chest2, eo, hip, co, laCo, trangThai, ghiChu]]
        print(row)
        self.modelDHAo.appendRow(row)
        self.update_total_price()

    def update_total_price(self):
        # Lấy giá trị hiện tại từ label và chuyển đổi thành số nguyên
        try:
            current_total_text = self.labelTongTienSo.text()
            total_price = int(current_total_text)  # Chuyển đổi giá trị hiện tại thành số nguyên
        except ValueError:
            total_price = 0  # Nếu không thể chuyển đổi, khởi tạo tổng tiền là 0

        column_index = 5  # Giả sử cột "Thành tiền" là cột thứ 6 (chỉ số là 5)
        row_count = self.modelDHAo.rowCount()

        for row in range(row_count):
            item = self.modelDHAo.item(row, column_index)
            if item and item.text():
                try:
                    # Chuyển đổi giá trị thành số nguyên
                    value = int(item.text())
                    total_price += value
                except ValueError:
                    continue

        # Cập nhật label với tổng tiền mới
        self.labelTongTienSo.setText(str(total_price))

    def add_data_to_table_quan(self):
        type = self.comboBoxDHLoaiQuan.currentText()
        loaiVai = self.lineEditDHLoaiVaiQ.text()
        quantity = self.lineEdit_DHSLQuan.text()

        query = "SELECT congMay FROM SanPham1 WHERE tenSanPham = ?"
        cursor = self.conn.cursor()
        cursor.execute(query, (type,))
        result = cursor.fetchone()
        congMay = int(result[0]) if result else "0"
        tienVai = int(self.lineEdit_DHTTienQuan.text()) - congMay

        check_vai_query = "SELECT TenVai FROM Vai WHERE TenVai = ?"
        cursor.execute(check_vai_query, (loaiVai,))
        vai_result = cursor.fetchone()

        if not vai_result:
            # Nếu loaiVai không tồn tại, thêm mới vào bảng Vai
            insert_vai_query = """
                INSERT INTO Vai (MaVai, TenVai, MaNhaCungCap, GiaBan, NgayNhap)
                VALUES (?, ?, ?, ?, ?)
            """
            ngay_nhap = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Lấy thời gian hiện tại làm NgayNhap
            cursor.execute(insert_vai_query, (loaiVai, loaiVai, loaiVai, tienVai, ngay_nhap))
            self.conn.commit()  # Lưu thay đổi vào cơ sở dữ liệu
            print(f"Added new fabric: {loaiVai} with price: {tienVai} and entry date: {ngay_nhap}")
        price = self.lineEdit_DHTTienQuan.text()
        length = self.lineEditHDQuanDai.text()
        lung = self.lineEditHDQuanLung.text()
        mong = self.lineEditHDQuanMong.text()
        ve = self.lineEditHDQuanVe.text()
        goi = self.lineEditHDQuanGoi.text()
        tc = self.lineEditHDQuanTC.text()
        ong = self.lineEditHDQuanOng.text()
        vDay = self.lineEditHDQuanVDay.text()
        len_quan = self.lineEditHDQuanL.text()
        xuong_quan = self.lineEditHDQuanX.text()
        trangThai = self.comboBoxDHQuanChuaCat.currentText()
        ghiChu = self.lineEditDHQuanGhiChu.text()
        row = [QStandardItem(field) for field in [type, loaiVai, quantity, congMay, tienVai, price, length, lung, mong, ve, goi, tc, ong, vDay, len_quan, xuong_quan, trangThai, ghiChu]]

        self.modelDHQuan.appendRow(row)
    def delete_selected_row_ao(self):
        indices = self.tableViewDHAo.selectionModel().selectedRows()
        for index in sorted(indices):
            self.modelDHAo.removeRow(index.row())

    def delete_selected_row_quan(self):
        indices = self.tableViewDHQuan.selectionModel().selectedRows()
        for index in sorted(indices):
            self.modelDHQuan.removeRow(index.row())

    def populate_combobox_trang_thai(self):
        status_list = self.fetch_trang_thai()
        self.comboBoxDHAoChuaCat.addItems(status_list)
        self.comboBoxDHQuanChuaCat.addItems(status_list)

    def populate_combobox_sp_ao(self):
        status_list = self.fetch_sp_ao()
        self.comboBoxDHLoaiAo.addItems(status_list)

    def populate_combobox_sp_vai(self):
        pass

    def populate_combobox_sp_quan(self):
        status_list = self.fetch_sp_quan()
        self.comboBoxDHLoaiQuan.addItems(status_list)


    def fetch_trang_thai(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT tenTrangThai FROM TrangThai")
        rows = cursor.fetchall()
        return [row[0] for row in rows]


    def fetch_sp_ao(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT tenSanPham FROM SanPham1 where maSanPham like 'AO%'")
        rows = cursor.fetchall()
        return [row[0] for row in rows]

    def fetch_sp_quan(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT tenSanPham FROM SanPham1 where maSanPham like 'QUAN%'")
        rows = cursor.fetchall()
        return [row[0] for row in rows]

    def fetch_sp_vai(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT TenVai FROM Vai")
        rows = cursor.fetchall()
        return [row[0] for row in rows]

    def save_data_don_hang(self):
        tenKH = self.lineEditTenKH.text().strip()
        phone_number = self.lineEditSDT.text().strip()
        dia_chi = self.lineEditDiaChi.text().strip()
        ngayMay = self.dateEditNgayMay.date().toString('yyyy-MM-dd')
        ngayGiao = self.dateEditNgayGiao.date().toString('yyyy-MM-dd')
        tongTien = self.labelTongTienSo.text()
        ngayTraTruoc = self.dateEditNgay.date().toString('yyyy-MM-dd')
        if not tenKH or not phone_number:
            QtWidgets.QMessageBox.warning(None, "Lỗi", "Tên khách hàng và số điện thoại không được để trống.")
            return
        if self.modelDHAo.rowCount() == 0 and self.modelDHQuan.rowCount() == 0:
            QtWidgets.QMessageBox.warning(None, "Lỗi", "Không có dữ liệu trong bảng áo và quần.")
            return
        def get_text_or_default(item, default=None):
            return item.text() if item and item.text() else default

        def get_int_or_default(item, default=0):
            try:
                return int(item.text()) if item and item.text() else default
            except ValueError:
                return default

        def get_float_or_default(item, default=0.0):
            try:
                return float(item.text()) if item and item.text() else default
            except ValueError:
                return default

        try:
            # Kiểm tra xem có hàng nào trong modelDHAo hoặc modelDHQuan không
            if self.modelDHAo.rowCount() > 0 or self.modelDHQuan.rowCount() > 0:
                ngayTao = self.dateEditNgayGiao.date().toString('yyyy-MM-dd')
                ma_phieu_xuat = self.ma_hoa_don

                # Tạo PhieuXuat
                query0 = """INSERT INTO PhieuXuat (MaPhieuXuat, ngayMay, NgayGiao, SoDienThoaiKH, TongCongTien, NgayTraTruoc, ngayTao) OUTPUT INSERTED.ID VALUES (?, ?, ?, ?, ?, ?, ?)"""
                values0 = (ma_phieu_xuat, ngayMay, ngayGiao,phone_number, tongTien, ngayTraTruoc, ngayTao)
                cursor = self.conn.cursor()
                cursor.execute(query0, values0)
                maphieuxuat = cursor.fetchone()[0]
                self.conn.commit()

                # Kiểm tra khách hàng và thêm nếu chưa tồn tại
                query_check_kh = """SELECT ID FROM KhachHang WHERE TenKhachHang = ? AND DienThoai = ?"""
                cursor.execute(query_check_kh, (tenKH, phone_number))
                khach_hang = cursor.fetchone()
                if khach_hang is None:
                    query1 = """INSERT INTO KhachHang (MaKhachHang, TenKhachHang, DienThoai, DiaChi, NgayTao) OUTPUT INSERTED.ID VALUES (?, ?, ?, ?, ?)"""
                    values1 = (phone_number, tenKH, phone_number, dia_chi, ngayTao)
                    cursor.execute(query1, values1)
                    khach_hang_id = cursor.fetchone()[0]
                else:
                    khach_hang_id = khach_hang[0]
                print(khach_hang_id)
                query_update_kh = """UPDATE PhieuXuat SET SoDienThoaiKH = ? WHERE ID = ?"""
                cursor.execute(query_update_kh, (phone_number, maphieuxuat))
                self.conn.commit()

                # Vòng lặp qua các hàng
                for row in range(max(self.modelDHAo.rowCount(), self.modelDHQuan.rowCount())):
                    try:
                        # Lấy dữ liệu từ model áo
                        type = get_text_or_default(self.modelDHAo.item(row, 0))
                        quantity = get_int_or_default(self.modelDHAo.item(row, 1))
                        congMayAo = Decimal(get_int_or_default(self.modelDHAo.item(row, 2)))
                        tienVaiAo = Decimal(get_int_or_default(self.modelDHAo.item(row, 3)))
                        price = get_float_or_default(self.modelDHAo.item(row, 4))
                        length1 = get_text_or_default(self.modelDHAo.item(row, 5))
                        length2 = get_text_or_default(self.modelDHAo.item(row, 6))
                        shoulder1 = get_text_or_default(self.modelDHAo.item(row, 7))
                        shoulder2 = get_text_or_default(self.modelDHAo.item(row, 8))
                        shoulder3 = get_text_or_default(self.modelDHAo.item(row, 9))
                        shoulder4 = get_text_or_default(self.modelDHAo.item(row, 10))
                        sleeve1 = get_text_or_default(self.modelDHAo.item(row, 11))
                        sleeve2 = get_text_or_default(self.modelDHAo.item(row, 12))
                        sleeve3 = get_text_or_default(self.modelDHAo.item(row, 13))
                        chest1 = get_text_or_default(self.modelDHAo.item(row, 14))
                        chest2 = get_text_or_default(self.modelDHAo.item(row, 15))
                        chest3 = get_text_or_default(self.modelDHAo.item(row, 16))
                        eo = get_text_or_default(self.modelDHAo.item(row, 17))
                        hip = get_text_or_default(self.modelDHAo.item(row, 18))
                        co = get_text_or_default(self.modelDHAo.item(row, 19))
                        laCo = get_text_or_default(self.modelDHAo.item(row, 20))
                        trangThaiAo = get_text_or_default(self.modelDHAo.item(row, 21))
                        loaiVaiAo = get_text_or_default(self.modelDHAo.item(row, 22))
                        ghiChu = get_text_or_default(self.modelDHAo.item(row, 23))

                        # Lấy dữ liệu từ model quần
                        loai = get_text_or_default(self.modelDHQuan.item(row, 0))
                        loaiVaiQuan = get_text_or_default(self.modelDHQuan.item(row, 1))
                        sl = get_int_or_default(self.modelDHQuan.item(row, 2))
                        congMayQ = Decimal(get_int_or_default(self.modelDHQuan.item(row, 3)))
                        tienVaiQ = Decimal(get_int_or_default(self.modelDHQuan.item(row, 4)))
                        giaTien = get_float_or_default(self.modelDHQuan.item(row, 5))
                        dai = get_text_or_default(self.modelDHQuan.item(row, 6))
                        lung = get_text_or_default(self.modelDHQuan.item(row, 7))
                        mong = get_text_or_default(self.modelDHQuan.item(row, 8))
                        ve = get_text_or_default(self.modelDHQuan.item(row, 9))
                        goi = get_text_or_default(self.modelDHQuan.item(row, 10))
                        tc = get_text_or_default(self.modelDHQuan.item(row, 11))
                        ong = get_text_or_default(self.modelDHQuan.item(row, 12))
                        vDay = get_text_or_default(self.modelDHQuan.item(row, 13))
                        lenQuan = get_text_or_default(self.modelDHQuan.item(row, 14))
                        xuongQuan = get_text_or_default(self.modelDHQuan.item(row, 15))
                        trangThaiQuan = get_text_or_default(self.modelDHQuan.item(row, 16))
                        ghiChuQuan = get_text_or_default(self.modelDHQuan.item(row, 17))

                        query = """
                        INSERT INTO ChiTietPhieuXuat (
                            maPhieuXuat, loaiAo, loaiVaiAo, tongSoLuongAo, congMayAo, tienVaiAo, tongTienAo, daiAoTren, 
                            daiAoDuoi, vai, xuoiVai, chomVai, haVai, tay, bapTay, khuyuTay, nguc, haNguc, doGiamNguc,
                            eo, mongAo, co, laCo, maTrangThaiAo, ghiChuAo, loaiQuan, loaiVaiQuan, tongSoLuongQuan, congMayQuan, tienVaiQuan, tongTienQuan, daiQuan, lung, 
                            mong, ve, goi, TC, ong, vDay, len, xuong, maTrangThaiQuan, ghiChuQuan, ngayTao
                        )
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """
                        values = (
                            maphieuxuat, type, loaiVaiAo, quantity, congMayAo, tienVaiAo, price, length1,
                            length2, shoulder1, shoulder2, shoulder3, shoulder4, sleeve1, sleeve2, sleeve3,
                            chest1, chest2, chest3, eo, hip, co, laCo, trangThaiAo, ghiChu,
                            loai, loaiVaiQuan, sl, congMayQ, tienVaiQ, giaTien, dai, lung, mong, ve, goi, tc, ong, vDay, lenQuan, xuongQuan,
                            trangThaiQuan,
                            ghiChuQuan, ngayTao
                        )

                        cursor.execute(query, values)
                        self.conn.commit()
                        print(f"Dữ liệu đã được lưu thành công cho hàng {row + 1}")
                    except Exception as e:
                        print(f"Lỗi khi lưu dữ liệu cho hàng {row + 1}: {e}")
                        print(e)
            else:
                print("Không có dữ liệu để lưu")

        except Exception as e:
            print(f"Lỗi khi tạo PhieuXuat: {e}")
            print(e)
        self.update_invoice_number()
        # Xóa dữ liệu trong các model
        self.modelDHAo.removeRows(0, self.modelDHAo.rowCount())
        self.modelDHQuan.removeRows(0, self.modelDHQuan.rowCount())
        self.reload_table_data()

        # for row in range(max(self.modelDHAo.rowCount(), self.modelDHQuan.rowCount())):
        #     try:
        #         # Lấy dữ liệu từ model áo
        #         type = get_text_or_default(self.modelDHAo.item(row, 0))
        #         quantity = get_int_or_default(self.modelDHAo.item(row, 1))
        #         price = get_float_or_default(self.modelDHAo.item(row, 2))
        #         length1 = get_text_or_default(self.modelDHAo.item(row, 3))
        #         length2 = get_text_or_default(self.modelDHAo.item(row, 4))
        #         shoulder1 = get_text_or_default(self.modelDHAo.item(row, 5))
        #         shoulder2 = get_text_or_default(self.modelDHAo.item(row, 6))
        #         shoulder3 = get_text_or_default(self.modelDHAo.item(row, 7))
        #         shoulder4 = get_text_or_default(self.modelDHAo.item(row, 8))
        #         sleeve1 = get_text_or_default(self.modelDHAo.item(row, 9))
        #         sleeve2 = get_text_or_default(self.modelDHAo.item(row, 10))
        #         sleeve3 = get_text_or_default(self.modelDHAo.item(row, 11))
        #         chest1 = get_text_or_default(self.modelDHAo.item(row, 12))
        #         chest2 = get_text_or_default(self.modelDHAo.item(row, 13))
        #         chest3 = get_text_or_default(self.modelDHAo.item(row, 14))
        #         eo = get_text_or_default(self.modelDHAo.item(row, 15))
        #         hip = get_text_or_default(self.modelDHAo.item(row, 16))
        #         co = get_text_or_default(self.modelDHAo.item(row, 17))
        #         laCo = get_text_or_default(self.modelDHAo.item(row, 18))
        #         trangThaiAo = get_text_or_default(self.modelDHAo.item(row, 19))
        #         ghiChu = get_text_or_default(self.modelDHAo.item(row, 20))
        #         ngayTao = self.dateEditNgayGiao.date().toString('yyyy-MM-dd')
        #
        #         # Lấy dữ liệu từ model quần
        #         loai = get_text_or_default(self.modelDHQuan.item(row, 0))
        #         sl = get_int_or_default(self.modelDHQuan.item(row, 1))
        #         giaTien = get_float_or_default(self.modelDHQuan.item(row, 2))
        #         dai = get_text_or_default(self.modelDHQuan.item(row, 3))
        #         lung = get_text_or_default(self.modelDHQuan.item(row, 4))
        #         mong = get_text_or_default(self.modelDHQuan.item(row, 5))
        #         ve = get_text_or_default(self.modelDHQuan.item(row, 6))
        #         goi = get_text_or_default(self.modelDHQuan.item(row, 7))
        #         tc = get_text_or_default(self.modelDHQuan.item(row, 8))
        #         ong = get_text_or_default(self.modelDHQuan.item(row, 9))
        #         vDay = get_text_or_default(self.modelDHQuan.item(row, 10))
        #         lenQuan = get_text_or_default(self.modelDHQuan.item(row, 11))
        #         xuongQuan = get_text_or_default(self.modelDHQuan.item(row, 12))
        #         trangThaiQuan = get_text_or_default(self.modelDHQuan.item(row, 13))
        #         ghiChuQuan = get_text_or_default(self.modelDHQuan.item(row, 14))
        #         query0 = """INSERT INTO PhieuXuat (MaPhieuXuat, ngayMay, NgayGiao, ngayTao) OUTPUT INSERTED.ID VALUES (?, ?, ?, ?)"""
        #         values0 = (ma_phieu_xuat, ngayMay, ngayGiao, ngayTao)
        #         cursor = self.conn.cursor()
        #         cursor.execute(query0, values0)
        #         maphieuxuat = cursor.fetchone()[0]
        #         self.conn.commit()
        #         query_check_kh = """SELECT ID FROM KhachHang WHERE TenKhachHang = ? AND DienThoai = ?"""
        #         cursor.execute(query_check_kh, (tenKH, phone_number))
        #         khach_hang = cursor.fetchone()
        #         if khach_hang is None:
        #             # Thêm khách hàng mới nếu chưa tồn tại
        #             query1 = """INSERT INTO KhachHang (TenKhachHang, DienThoai, DiaChi, NgayTao) OUTPUT INSERTED.ID VALUES (?, ?, ?, ?)"""
        #             values1 = (tenKH, phone_number, dia_chi, ngayTao)
        #             cursor.execute(query1, values1)
        #             khach_hang_id = cursor.fetchone()[0]
        #         else:
        #             khach_hang_id = khach_hang[0]
        #
        #         query_update_kh = """UPDATE PhieuXuat SET MaKhachHang = ? WHERE ID = ?"""
        #         cursor.execute(query_update_kh, (khach_hang_id, maphieuxuat))
        #         self.conn.commit()
        #
        #         query = """
        #         INSERT INTO ChiTietPhieuXuat (
        #             maPhieuXuat, loaiAo, tongSoLuongAo, tongTienAo, daiAoTren,
        #             daiAoDuoi, vai, xuoiVai, chomVai, haVai, tay, bapTay, khuyuTay, nguc, haNguc, doGiamNguc,
        #             eo, mongAo, co, laCo, maTrangThaiAo, ghiChuAo, loaiQuan, tongSoLuongQuan, tongTienQuan, daiQuan, lung,
        #             mong, ve, goi, TC, ong, vDay, len, xuong, maTrangThaiQuan, ghiChuQuan, ngayTao
        #         )
        #         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        #         """
        #         values = (
        #             maphieuxuat, type, quantity, price, length1,
        #             length2, shoulder1, shoulder2, shoulder3, shoulder4, sleeve1, sleeve2, sleeve3,
        #             chest1, chest2, chest3, eo, hip, co, laCo, trangThaiAo, ghiChu,
        #             loai, sl, giaTien, dai, lung, mong, ve, goi, tc, ong, vDay, lenQuan, xuongQuan, trangThaiQuan,
        #             ghiChuQuan, ngayTao
        #         )
        #
        #         cursor.execute(query, values)
        #         self.conn.commit()
        #         print(f"Dữ liệu đã được lưu thành công cho hàng {row + 1}")
        #     except Exception as e:
        #         print(f"Lỗi khi lưu dữ liệu cho hàng {row + 1}: {e}")
        #         print(e)
        # self.modelDHAo.clear()
        # self.modelDHQuan.clear()
        # self.reload_table_data()

    def generate_invoice_number(self):
        now = datetime.now()
        current_date = now.date()
        current_date_str = current_date.strftime("%Y-%m-%d %H:%M:%S")  # Định dạng ngày theo kiểu 'YYYY-MM-DD'
        formatted_date = current_date_str.replace("-", "")
        print(current_date_str)
        if current_date != self.last_date:
            self.last_date = current_date

            # Tìm số thứ tự cao nhất trong ngày hiện tại
            cursor = self.conn.cursor()
            query = """
                SELECT ISNULL(MAX(CAST(SUBSTRING(MaPhieuXuat, LEN(MaPhieuXuat) - 3, 4) AS INT)), 0)
                FROM PhieuXuat
                WHERE SUBSTRING(MaPhieuXuat, 1, 8) = ?
            """
            cursor.execute(query, (formatted_date,))
            result = cursor.fetchone()

            if result[0] is not None:
                self.serial_number = result[0] + 1
            else:
                self.serial_number = 1

        else:
            self.serial_number += 1


        ma_hoa_don = now.strftime("%d%m%Y") + f".{self.serial_number:04}"
        self.lineEditDHMaHD.setText(ma_hoa_don)
        return ma_hoa_don


    def check_khach_hang(self):
        sdtKH = self.lineEditSDT.text()
        cursor = self.conn.cursor()
        query_check_kh = """SELECT ID, TenKhachHang, DienThoai, DiaChi FROM KhachHang WHERE DienThoai = ?"""
        cursor.execute(query_check_kh, (sdtKH,))
        khach_hang = cursor.fetchone()

        if khach_hang:
            # khach_hang_id = khach_hang[0]
            self.lineEditTenKH.setText(khach_hang[1])
            khach_hang_id = self.lineEditSDT.setText(khach_hang[2])
            self.lineEditDiaChi.setText(khach_hang[3])
            query_check_px = """SELECT ID FROM PhieuXuat WHERE SoDienThoaiKH = ?"""
            cursor.execute(query_check_px, (khach_hang_id,))
            phieu_xuat = cursor.fetchone()
            print(phieu_xuat)
            if phieu_xuat:
                ma_phieu_xuat = phieu_xuat[0]
                # ma_phieu_xuat_suffix = int(ma_phieu_xuat.split('.')[-1].lstrip('0')) #20240724.0068
                # Lấy thông tin từ ChiTietPhieuXuat
                query_chi_tiet_px = """SELECT daiAoTren, daiAoDuoi, vai, xuoiVai, chomVai, haVai, tay, bapTay, khuyuTay, nguc, haNguc, doGiamNguc, eo, mongAo, co, laCo, loaiVaiAo, ghiChuAo, daiQuan, lung, mong, ve, goi, TC, ong, vDay, len, xuong, loaiVaiQuan, ghiChuQuan FROM ChiTietPhieuXuat WHERE maPhieuXuat = ?"""
                cursor.execute(query_chi_tiet_px, (ma_phieu_xuat,))
                chi_tiet = cursor.fetchone()
                print(chi_tiet)
                if chi_tiet:
                    self.lineEditDHAoDai11.setText(chi_tiet[0])
                    self.lineEditHDAoDai21.setText(chi_tiet[1])
                    self.lineEditDHAoVai11.setText(chi_tiet[2])
                    self.lineEditDHAoVai12.setText(chi_tiet[3])
                    self.lineEditDHAoVai13.setText(chi_tiet[4])
                    self.lineEditDHAoVai21.setText(chi_tiet[5])
                    self.lineEditDHAoTay11.setText(chi_tiet[6])
                    self.lineEditDHAoTay12.setText(chi_tiet[7])
                    self.lineEditDHAoTay21.setText(chi_tiet[8])
                    self.lineEditDHAoNguc11.setText(chi_tiet[9])
                    self.lineEditDHAoNguc12.setText(chi_tiet[10])
                    self.lineEditDHAoNguc21.setText(chi_tiet[11])
                    self.lineEditDHAoEo.setText(chi_tiet[12])
                    self.lineEditDHAoMong.setText(chi_tiet[13])
                    self.lineEditDHAoCo.setText(chi_tiet[14])
                    self.lineEditDHAoLaCo.setText(chi_tiet[15])
                    self.lineEditDHAoGhiChu.setText(chi_tiet[16])
                    self.lineEditHDQuanDai.setText(chi_tiet[17])
                    self.lineEditHDQuanLung.setText(chi_tiet[18])
                    self.lineEditHDQuanMong.setText(chi_tiet[19])
                    self.lineEditHDQuanVe.setText(chi_tiet[20])
                    self.lineEditHDQuanGoi.setText(chi_tiet[21])
                    self.lineEditHDQuanTC.setText(chi_tiet[22])
                    self.lineEditHDQuanOng.setText(chi_tiet[23])
                    self.lineEditHDQuanVDay.setText(chi_tiet[24])
                    self.lineEditHDQuanL.setText(chi_tiet[25])
                    self.lineEditHDQuanX.setText(chi_tiet[26])
                    self.lineEditDHQuanGhiChu.setText(chi_tiet[27])

    def show_phieu_xuat_list(self):
        try:
            """Hiển thị danh sách phiếu xuất trong một cửa sổ mới."""
            # Fetch dữ liệu từ cơ sở dữ liệu
            cursor = self.conn.cursor()
            query = """
                SELECT ID, MaPhieuXuat, NgayMay, NgayGiao, NgayTatToan, TatToan, SoDienThoaiKH,
                       TongCongSoLuong, TongCongChietKhau, TongCongTien, TongTienCong, TongTienVai,
                       NgayTraTruoc, TraTruoc, ConNo, SoLanDaTraNo, GhiChu, NgayTao, NgayCapNhat
                FROM PhieuXuat
            """
            cursor.execute(query)
            data = cursor.fetchall()
            if not data:
                print("Không có dữ liệu để hiển thị.")
                return
            # Tạo cửa sổ mới để hiển thị danh sách
            self.list_window_phieu_xuat = QtWidgets.QWidget()
            self.list_window_phieu_xuat.setWindowTitle('Danh sách phiếu xuất')
            list_layout = QtWidgets.QVBoxLayout()

            # Tạo QTableWidget
            table1_widget = QtWidgets.QTableWidget()
            table1_widget.setRowCount(len(data))
            table1_widget.setColumnCount(18)
            table1_widget.setHorizontalHeaderLabels([
                "ID", "Mã Phiếu Xuất", "Ngày May", "Ngày Giao", "Ngày Tất Toán", "Tất Toán",
                "Mã Khách Hàng", "Tổng Cộng Số Lượng", "Tổng Cộng Chiết Khấu", "Tổng Cộng Tiền",
                "Tổng Tiền Công", "Tổng Tiền Vải", "Ngày Trả Trước", "Trả Trước", "Còn Nợ",
                "Số Lần Đã Trả Nợ", "Ghi Chú", "Ngày Tạo", "Ngày Cập Nhật"
            ])

            # Điền dữ liệu vào QTableWidget
            for row, record in enumerate(data):
                for column, item in enumerate(record):
                    item_widget = QtWidgets.QTableWidgetItem(str(item))
                    item_widget.setFlags(item_widget.flags() & ~QtCore.Qt.ItemIsEditable)  # Không cho phép chỉnh sửa
                    table1_widget.setItem(row, column, item_widget)

            list_layout.addWidget(table1_widget)
            self.list_window_phieu_xuat.setLayout(list_layout)
            self.list_window_phieu_xuat.resize(1000, 800)
            self.list_window_phieu_xuat.show()
        except Exception as e:
                    print(e)

    def show_chi_tiet_phieu_xuat_list(self):
        try:
            cursor = self.conn.cursor()
            query = """
                SELECT ID, maPhieuXuat, loaiAo, tenHinhAo, tongSoLuongAo, tongTienAo, daiAoTren, daiAoDuoi,
                       vai, xuoiVai, chomVai, haVai, tay, bapTay, khuyuTay, nguc, haNguc, doGiamNguc, eo, 
                       mongAo, co, laCo, maTrangThaiAo, ghiChuAo, loaiQuan, tenHinhQuan, tongSoLuongQuan, 
                       tongTienQuan, daiQuan, lung, mong, ve, goi, TC, ong, vDay, len, xuong, 
                       maTrangThaiQuan, ghiChuQuan, ngayTao, ngayCapNhat
                FROM ChiTietPhieuXuat
            """
            cursor.execute(query)
            data = cursor.fetchall()
            if not data:
                print("Không có dữ liệu để hiển thị.")
                return

            self.detail_window = QtWidgets.QWidget()
            self.detail_window.setWindowTitle('Danh sách chi tiết phiếu xuất')
            detail_layout = QtWidgets.QVBoxLayout()

            table2_widget = QtWidgets.QTableWidget()
            table2_widget.setRowCount(len(data))
            table2_widget.setColumnCount(40)
            table2_widget.setHorizontalHeaderLabels([
                "ID", "Mã Phiếu Xuất", "Loại Áo", "Tên Hình Áo", "Tổng Số Lượng Áo", "Tổng Tiền Áo",
                "Dài Áo Trên", "Dài Áo Dưới", "Vai", "Xuôi Vai", "Chồm Vai", "Hạ Vai", "Tay",
                "Bắp Tay", "Khủy Tay", "Ngực", "Hạ Ngực", "Độ Giảm Ngực", "Eo", "Mông Áo", "Cổ",
                "Lá Cổ", "Mã Trạng Thái Áo", "Ghi Chú Áo", "Loại Quần", "Tên Hình Quần",
                "Tổng Số Lượng Quần", "Tổng Tiền Quần", "Dài Quần", "Lưng", "Mông", "Vè",
                "Gối", "TC", "Ống", "Vẩy Đay", "Lên", "Xuống", "Mã Trạng Thái Quần", "Ghi Chú Quần",
                "Ngày Tạo", "Ngày Cập Nhật"
            ])

            for row, record in enumerate(data):
                for column, item in enumerate(record):
                    item_widget = QtWidgets.QTableWidgetItem(str(item))
                    item_widget.setFlags(item_widget.flags() & ~QtCore.Qt.ItemIsEditable)  # Không cho phép chỉnh sửa
                    table2_widget.setItem(row, column, item_widget)

            # Thêm style cho bảng
            table2_widget.setStyleSheet("""
                QTableWidget {
                    border: 1px solid #dcdcdc;
                    border-radius: 4px;
                    font-size: 14px;
                }
                QHeaderView::section {
                    background-color: #f0f0f0;
                    padding: 4px;
                    border: 1px solid #dcdcdc;
                }
                QTableWidget::item {
                    padding: 4px;
                }
            """)
            detail_layout.addWidget(table2_widget)
            self.detail_window.setLayout(detail_layout)
            self.detail_window.resize(1000, 800)
            self.detail_window.show()
        except Exception as e:
            print(e)

    def create_chart(self):
        # Xóa các widget cũ trong chartLayout
        if hasattr(self, 'chartLayout'):
            for i in reversed(range(self.chartLayout.count())):
                self.chartLayout.itemAt(i).widget().setParent(None)
        else:
            self.chartLayout = QtWidgets.QVBoxLayout(self.chartWidget)

        # Kiểm tra và tạo combobox năm nếu chưa tồn tại
        if not hasattr(self, 'yearComboBox'):
            self.yearComboBox = QtWidgets.QComboBox(self.chartWidget)
            self.yearComboBox.setGeometry(QtCore.QRect(10, 10, 100, 25))
            self.yearComboBox.currentIndexChanged.connect(self.create_chart)
            self.populate_year_combobox()

        self.chartLayout.addWidget(self.yearComboBox)

        # Lấy dữ liệu biểu đồ
        day_data, month_data, month_tongtiencong = self.get_data_for_charts()

        # Tạo figure và canvas
        self.figure = plt.Figure()
        self.canvas = FigureCanvas(self.figure)
        self.chartLayout.addWidget(self.canvas)

        # Tạo biểu đồ đường
        self.line_chart = self.figure.add_subplot(311)
        dates = [row[0] for row in day_data]
        quantities = [row[1] for row in day_data]
        self.line_chart.plot(dates, quantities, marker='o', color='b')
        self.line_chart.set_xlabel("Ngày")
        self.line_chart.set_ylabel("Số lượng")

        # Tạo biểu đồ tròn
        self.pie_chart = self.figure.add_subplot(312)
        months = [row[0] for row in month_data]
        month_quantities = [row[1] for row in month_data]
        labels = ['Tháng {}'.format(m) for m in months]
        self.pie_chart.pie(month_quantities, labels=labels, autopct='%1.1f%%', startangle=0, colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99'])

        self.bar_chart = self.figure.add_subplot(313)
        month_labels = ['Tháng {}'.format(m) for m in months]
        tongtiencong = [row[1] for row in month_tongtiencong]
        self.bar_chart.bar(month_labels, tongtiencong, color='g')
        self.bar_chart.set_xlabel("Tháng")
        self.bar_chart.set_ylabel("Tổng Tiền Công")
        # Vẽ biểu đồ
        self.canvas.draw()

    def populate_year_combobox(self):
        try:
            cursor = self.conn.cursor()
            query_years = "SELECT DISTINCT YEAR(NgayTao) FROM PhieuXuat ORDER BY YEAR(NgayTao)"
            cursor.execute(query_years)
            years = cursor.fetchall()
            for year in years:
                self.yearComboBox.addItem(str(year[0]))
        except Exception as e:
            print(f"Lỗi khi lấy danh sách năm: {e}")

    def get_data_for_charts(self):
        try:
            selected_year = self.yearComboBox.currentText()
            if not selected_year:
                return [], [], []

            cursor = self.conn.cursor()

            # Lấy dữ liệu tổng hợp theo ngày trong năm đã chọn
            query_day = """
                SELECT CONVERT(date, NgayTao) AS Ngay, COUNT(*) AS SoLuong
                FROM PhieuXuat
                WHERE YEAR(NgayTao) = ?
                GROUP BY CONVERT(date, NgayTao)
                ORDER BY Ngay
            """
            cursor.execute(query_day, (selected_year,))
            day_data = cursor.fetchall()

            # Lấy dữ liệu tổng hợp theo tháng trong năm đã chọn
            query_month = """
                SELECT MONTH(NgayTao) AS Thang, COUNT(*) AS SoLuong
                FROM PhieuXuat
                WHERE YEAR(NgayTao) = ?
                GROUP BY MONTH(NgayTao)
                ORDER BY Thang
            """
            cursor.execute(query_month, (selected_year,))
            month_data = cursor.fetchall()

            query_month_tongtiencong = """
                SELECT MONTH(NgayTao) AS Thang, ISNULL(SUM(TongTienCong), 0) AS TongTienCong
                FROM PhieuXuat
                WHERE YEAR(NgayTao) = ?
                GROUP BY MONTH(NgayTao)
                ORDER BY Thang
            """
            cursor.execute(query_month_tongtiencong, (selected_year,))
            month_tongtiencong = cursor.fetchall()
            return day_data, month_data, month_tongtiencong
        except Exception as e:
            print(f"Lỗi khi lấy dữ liệu: {e}")
            return [], [], []

    def update_invoice_number(self):
        self.ma_hoa_don = self.generate_invoice_number()

    def hide_columns_Ao(self):
        # Danh sách các tên cột cần ẩn
        hidden_columns = [
            'Dài trên', 'Dài dưới', 'Vai', 'Xuôi vai', 'Chỏm vai', 'Hạ vai',
            'Tay', 'Bắp', 'Khuỷu', 'Ngực', 'Hạ Ngực', 'ĐG ngực', 'Eo',
            'Mông áo', 'Cổ', 'Lá cổ'
        ]

        # Lấy header view từ QTableView
        header_view = self.tableViewDHAo.horizontalHeader()

        # Tìm chỉ số của các cột cần ẩn
        header_labels = [self.modelDHAo.horizontalHeaderItem(i).text() for i in range(self.modelDHAo.columnCount())]

        for column_name in hidden_columns:
            if column_name in header_labels:
                column_index = header_labels.index(column_name)
                header_view.setSectionHidden(column_index, True)

    def hide_columns_Quan(self):
        # Danh sách các tên cột cần ẩn
        hidden_columns = [
            'Dài', 'Lưng', 'Mông', 'Vê', 'Gối', 'TC', 'Ống',
            'VĐáy', 'Lên', 'Xuống'
        ]

        # Lấy header view từ QTableView
        header_view = self.tableViewDHQuan.horizontalHeader()

        # Tìm chỉ số của các cột cần ẩn
        header_labels = [self.modelDHQuan.horizontalHeaderItem(i).text() for i in range(self.modelDHQuan.columnCount())]

        for column_name in hidden_columns:
            if column_name in header_labels:
                column_index = header_labels.index(column_name)
                header_view.setSectionHidden(column_index, True)

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("Nhu Danh Tailor")
    MainWindow.setWindowIcon(QtGui.QIcon("nhudanhlog.jpg"))
    MainWindow.showMaximized()
    MainWindow.show()
    sys.exit(app.exec_())
